% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/02_place.R
\name{place_ui}
\alias{place_ui}
\alias{place_server}
\title{Place module}
\usage{
place_ui(
  id,
  geo_data,
  group_vars,
  title = "Place",
  geo_lab = "Geo boundaries",
  groups_lab = "Group data by",
  n_lab = "N patients",
  full_screen = TRUE
)

place_server(
  id,
  df_ll,
  geo_data,
  group_vars,
  n_lab = "N patients",
  export_width = 1200,
  export_height = 650,
  filter_info = shiny::reactiveVal()
)
}
\arguments{
\item{id}{Module id. Must be the same in both the UI and server function to link the two.}

\item{geo_data}{A list of spatial sf dataframes with information for different geographical levels.}

\item{group_vars}{named character vector of categorical variables for the data grouping input. Names are used as variable labels.}

\item{title}{The title for the card.}

\item{geo_lab}{The label for the geographical level selection.}

\item{groups_lab}{The label for the group data by selection.}

\item{n_lab}{The label for the raw count variable.}

\item{full_screen}{Add button to card to with the option to enter full screen mode?}

\item{df_ll}{Data frame or tibble of patient level linelist data. Can be either a shiny reactive or static dataset.}

\item{export_width}{The width of the exported map image.}

\item{export_height}{The height of the exported map image.}

\item{filter_info}{If contained within an app using \code{\link[=filter_server]{filter_server()}}, supply the \code{filter_info} element
returned by that function here as a shiny reactive to add filter information to chart exports.}
}
\value{
A \link[bslib:card]{bslib::card} UI element with options and download button and a leaflet map.

The server function returns the leaflet map's shape click information as a list.
}
\description{
Visualise geographical distribution across multiple administrative boundaries on an interactive leaflet map.
}
\examples{
library(shiny)
library(bslib)
library(epishiny)

# example package data
data("df_ll") # linelist
data("sf_yem") # sf geo boundaries for Yemen admin 1 & 2

# setup geo data for adm1 and adm2 in the format
# required for epishiny map module
geo_data <- list(
  "adm1" = list(
    level_name = "Governorate",
    sf = sf_yem$adm1,
    name_var = "adm1_name",
    join_by = c("pcode" = "adm1_pcode")
  ),
  "adm2" = list(
    level_name = "District",
    sf = sf_yem$adm2,
    name_var = "adm2_name",
    join_by = c("pcode" = "adm2_pcode")
  )
)

# range of dates used in filter module to filter time period
date_range <- range(df_ll$date_notification, na.rm = TRUE)

# define date variables in data as named list to be used in app
date_vars <- c(
  "Date of notification" = "date_notification",
  "Date of onset" = "date_symptom_start",
  "Date of hospitalisation" = "date_hospitalisation_start",
  "Date of outcome" = "date_hospitalisation_end"
)

# define categorical grouping variables
# in data as named list to be used in app
group_vars <- c(
  "Governorate" = "adm1_origin",
  "Sex" = "sex_id",
  "Hospitalised" = "hospitalised_yn",
  "Vaccinated measles" = "vacci_measles_yn",
  "Outcome" = "outcome"
)

# user interface
ui <- page_sidebar(
  title = "epishiny",
  # sidebar
  sidebar = filter_ui(
    "filter",
    date_range = date_range,
    period_lab = "Notification period"
  ),
  # main content
  layout_columns(
    col_widths = c(12, 7, 5),
    place_ui(
      id = "map",
      geo_data = geo_data,
      group_vars = group_vars
    ),
    time_ui(
      id = "curve",
      title = "Time",
      date_vars = date_vars,
      group_vars = group_vars,
      ratio_line_lab = "Show CFR line?"
    ),
    person_ui(id = "age_sex")
  )
)

# app server
server <- function(input, output, session) {
  app_data <- filter_server(
    id = "filter",
    df_ll = df_ll,
    date_var = "date_notification",
    group_vars = group_vars
  )
  place_server(
    id = "map",
    df_ll = reactive(app_data()$df_ll),
    geo_data = geo_data,
    group_vars = group_vars,
    filter_info = reactive(app_data()$filter_info)
  )
  time_server(
    id = "curve",
    df_ll = reactive(app_data()$df_ll),
    date_vars = date_vars,
    group_vars = group_vars,
    ratio_var = "outcome",
    ratio_lab = "CFR",
    ratio_numer = "Deceased",
    ratio_denom = c("Deceased", "Healed", "Abandonment"),
    filter_info = reactive(app_data()$filter_info)
  )
  person_server(
    id = "age_sex",
    df_ll = reactive(app_data()$df_ll),
    age_var = "age_years",
    sex_var = "sex_id",
    male_level = "Male",
    female_level = "Female",
    filter_info = reactive(app_data()$filter_info)
  )
}

# launch app
if (interactive()) {
  shinyApp(ui, server)
}
}
