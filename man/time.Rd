% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/01_time.R
\name{time}
\alias{time}
\alias{time_ui}
\alias{time_server}
\title{Time module}
\usage{
time_ui(
  id,
  date_vars,
  group_vars,
  title = "Time",
  opts_btn_lab = "options",
  date_lab = "Date axis",
  date_int_lab = "Date interval",
  day_week_month_labs = c("Day", "Week", "Month"),
  groups_lab = "Group data by",
  ratio_line_lab = NULL,
  full_screen = TRUE
)

time_server(
  id,
  df_ll,
  date_vars,
  group_vars,
  y_lab = "Patients",
  ratio_var = NULL,
  ratio_lab = NULL,
  ratio_numer = NULL,
  ratio_denom = NULL,
  filter_info = shiny::reactiveVal()
)
}
\arguments{
\item{id}{module id. Must be the same in both the UI and server function to link the two.}

\item{date_vars}{named character vector of date variables for the date axis input. Names are used as variable labels.}

\item{group_vars}{named character vector of categorical variables for the data grouping input. Names are used as variable labels.}

\item{title}{header title for the card.}

\item{opts_btn_lab}{text label for the dropdown menu button.}

\item{date_lab}{text label for the date variable input.}

\item{date_int_lab}{text label for the date interval input.}

\item{day_week_month_labs}{character vector with text labels for day, week and month, respectively.}

\item{groups_lab}{text label for the grouping variable input.}

\item{ratio_line_lab}{text label for the ratio line input. If not supplied the input is not included.}

\item{full_screen}{add full-screen button to the card.}

\item{df_ll}{Data frame or tibble of patient level linelist data. Can be either a shiny reactive or static dataset.}

\item{y_lab}{text label for y-axis of chart.}

\item{ratio_var}{character string of variable name to use for ratio calculation.}

\item{ratio_lab}{text label to describe the computed ratio i.e. 'CFR' for case fatality ratio.}

\item{ratio_numer}{value(s) in \code{ratio_var} to be used for the ratio numerator i.e. 'Death'.}

\item{ratio_denom}{values in \code{ratio_var} to be used for the ratio denominator i.e. \code{c('Death', 'Recovery')}.}

\item{filter_info}{if contained within an app using \code{\link[=filter_server]{filter_server()}}, supply the \code{filter_info} element
returned by that function here as a shiny reactive to add filter information to chart exports.}
}
\value{
the module server function returns any point click event data of the highchart.
see \link[highcharter:hc_add_event_point]{highcharter::hc_add_event_point} for details.
}
\description{
Visualise data over time with an interactive 'epicurve'.
}
\examples{
library(shiny)
library(bslib)
library(epishiny)

# example package data
data("df_ll") # linelist
data("sf_yem") # sf geo boundaries for Yemen admin 1 & 2

# setup geo data for adm1 and adm2 in the format
# required for epishiny map module
geo_data <- list(
  "adm1" = list(
    level_name = "Governorate",
    sf = sf_yem$adm1,
    name_var = "adm1_name",
    join_by = c("pcode" = "adm1_pcode")
  ),
  "adm2" = list(
    level_name = "District",
    sf = sf_yem$adm2,
    name_var = "adm2_name",
    join_by = c("pcode" = "adm2_pcode")
  )
)

# range of dates used in filter module to filter time period
date_range <- range(df_ll$date_notification, na.rm = TRUE)

# define date variables in data as named list to be used in app
date_vars <- c(
  "Date of notification" = "date_notification",
  "Date of onset" = "date_symptom_start",
  "Date of hospitalisation" = "date_hospitalisation_start",
  "Date of outcome" = "date_hospitalisation_end"
)

# define categorical grouping variables
# in data as named list to be used in app
group_vars <- c(
  "Governorate" = "adm1_origin",
  "Sex" = "sex_id",
  "Hospitalised" = "hospitalised_yn",
  "Vaccinated measles" = "vacci_measles_yn",
  "Outcome" = "outcome"
)

# user interface
ui <- page_sidebar(
  title = "epishiny",
  # sidebar
  sidebar = filter_ui(
    "filter",
    date_range = date_range,
    period_lab = "Notification period"
  ),
  # main content
  layout_columns(
    col_widths = c(12, 7, 5),
    place_ui(
      id = "map",
      geo_data = geo_data,
      group_vars = group_vars
    ),
    time_ui(
      id = "curve",
      title = "Time",
      date_vars = date_vars,
      group_vars = group_vars,
      ratio_line_lab = "Show CFR line?"
    ),
    person_ui(id = "age_sex")
  )
)

# app server
server <- function(input, output, session) {
  app_data <- filter_server(
    id = "filter",
    df_ll = df_ll,
    date_var = "date_notification",
    group_vars = group_vars
  )
  place_server(
    id = "map",
    df_ll = reactive(app_data()$df_ll),
    geo_data = geo_data,
    group_vars = group_vars,
    filter_info = reactive(app_data()$filter_info)
  )
  time_server(
    id = "curve",
    df_ll = reactive(app_data()$df_ll),
    date_vars = date_vars,
    group_vars = group_vars,
    ratio_var = "outcome",
    ratio_lab = "CFR",
    ratio_numer = "Deceased",
    ratio_denom = c("Deceased", "Healed", "Abandonment"),
    filter_info = reactive(app_data()$filter_info)
  )
  person_server(
    id = "age_sex",
    df_ll = reactive(app_data()$df_ll),
    age_var = "age_years",
    sex_var = "sex_id",
    male_level = "Male",
    female_level = "Female",
    filter_info = reactive(app_data()$filter_info)
  )
}

# launch app
if (interactive()) {
  shinyApp(ui, server)
}
}
