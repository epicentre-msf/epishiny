[{"path":"https://epicentre-msf.github.io/epishiny/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 epishiny authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/aggregated_data.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load libraries","title":"Using epishiny with aggregated data","text":"","code":"suppressPackageStartupMessages(library(readr)) suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(rnaturalearth)) suppressPackageStartupMessages(library(sf)) suppressPackageStartupMessages(library(epishiny))"},{"path":"https://epicentre-msf.github.io/epishiny/articles/aggregated_data.html","id":"import-aggregated-covid-19-data-from-who","dir":"Articles","previous_headings":"","what":"Import aggregated COVID-19 data from WHO","title":"Using epishiny with aggregated data","text":"","code":"df_who_covid <- read_csv(\"https://covid19.who.int/WHO-COVID-19-global-data.csv\") #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Rows: 1348 Columns: 3 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (3): <!DOCTYPE html> <html lang=\"en\" dir=\"ltr\"> <head> <!-- head to scra... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  glimpse(df_who_covid) #> Rows: 1,348 #> Columns: 3 #> $ `<!DOCTYPE html> <html lang=\"en\" dir=\"ltr\"> <head> <!-- head to scrape:on --> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge` <chr> … #> $ `chrome=1\" /> <meta charset=\"utf-8\" /><meta name=\"viewport\" content=\"width=device-width`                                           <chr> … #> $ `initial-scale=1\"><meta name=\"format-detection\" content=\"telephone=no\"><title>`                                                    <chr> …"},{"path":"https://epicentre-msf.github.io/epishiny/articles/aggregated_data.html","id":"import-country-boundaries-with-rnaturalearth","dir":"Articles","previous_headings":"","what":"Import country boundaries with rnaturalearth","title":"Using epishiny with aggregated data","text":"","code":"world_map <- ne_countries(scale = \"small\", type = \"countries\", returnclass = \"sf\") %>%   st_transform(crs = 4326) %>%   select(iso_a2_eh, name, pop_est)  # setup the geo layer for epishiny geo_data <- geo_layer(   layer_name = \"Country\",   sf = world_map,   name_var = \"name\",   pop_var = \"pop_est\",   join_by = c(\"iso_a2_eh\" = \"Country_code\") )  geo_data #> $layer_name #> [1] \"Country\" #>  #> $sf #> Simple feature collection with 177 features and 5 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -180 ymin: -90 xmax: 180 ymax: 83.64513 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    iso_a2_eh                     name   pop_est                       geometry #> 1         FJ                     Fiji    889953 MULTIPOLYGON (((180 -16.067... #> 2         TZ                 Tanzania  58005463 MULTIPOLYGON (((33.90371 -0... #> 3         EH                W. Sahara    603253 MULTIPOLYGON (((-8.66559 27... #> 4         CA                   Canada  37589262 MULTIPOLYGON (((-122.84 49,... #> 5         US United States of America 328239523 MULTIPOLYGON (((-122.84 49,... #> 6         KZ               Kazakhstan  18513930 MULTIPOLYGON (((87.35997 49... #> 7         UZ               Uzbekistan  33580650 MULTIPOLYGON (((55.96819 41... #> 8         PG         Papua New Guinea   8776109 MULTIPOLYGON (((141.0002 -2... #> 9         ID                Indonesia 270625568 MULTIPOLYGON (((141.0002 -2... #> 10        AR                Argentina  44938712 MULTIPOLYGON (((-68.63401 -... #>           lon         lat #> 1   177.97595 -17.9376200 #> 2    34.14207  -6.2078294 #> 3   -12.57202  24.2305626 #> 4  -110.24381  56.7019200 #> 5   -99.31483  37.2367450 #> 6    66.31159  48.0689612 #> 7    63.44288  41.3532772 #> 8   144.22612  -6.6678356 #> 9   113.26946  -0.1785159 #> 10  -64.08055 -37.2391995 #>  #> $name_var #> [1] \"name\" #>  #> $pop_var #> [1] \"pop_est\" #>  #> $join_by #>      iso_a2_eh  #> \"Country_code\"  #>  #> attr(,\"class\") #> [1] \"epishiny_geo_layer\""},{"path":"https://epicentre-msf.github.io/epishiny/articles/aggregated_data.html","id":"define-count-variables-in-the-data","dir":"Articles","previous_headings":"","what":"Define count variables in the data","title":"Using epishiny with aggregated data","text":"insterested new case death variables, since time module handle calculating cumulative numbers us. supply named vector show different variable labels module’s indicator select input.","code":"count_vars <- c(\"Cases\" = \"New_cases\", \"Deaths\" = \"New_deaths\")"},{"path":"https://epicentre-msf.github.io/epishiny/articles/aggregated_data.html","id":"launch-time-module","dir":"Articles","previous_headings":"","what":"Launch time module","title":"Using epishiny with aggregated data","text":"","code":"launch_module(   module = \"time\",   df = df_who_covid,   date_vars = \"Date_reported\",   group_vars = \"WHO_region\",   count_vars = count_vars,   show_ratio = TRUE,   ratio_lab = \"CFR\",   ratio_numer = \"New_deaths\",   ratio_denom = \"New_cases\",   date_intervals = c(\"week\", \"month\", \"year\") )"},{"path":"https://epicentre-msf.github.io/epishiny/articles/aggregated_data.html","id":"launch-place-module","dir":"Articles","previous_headings":"","what":"Launch place module","title":"Using epishiny with aggregated data","text":"","code":"# filter to data in ongoing year for more relevant attack rate estimates map_data_filter <- df_who_covid %>%    filter(between(Date_reported, as.Date(\"2023-01-01\"), as.Date(\"2023-12-31\")))  launch_module(   module = \"place\",   df = map_data_filter,   geo_data = geo_data,   count_vars = count_vars )"},{"path":"https://epicentre-msf.github.io/epishiny/articles/aggregated_data.html","id":"launch-person-module","dir":"Articles","previous_headings":"","what":"Launch person module","title":"Using epishiny with aggregated data","text":"COVID-19 data age sex variables can’t use person module, demonstation purposes show can also used aggregated data set .","code":"# create a data set with case and death counts aggregated by age group and sex age_levels <- c(\"<5\", \"5-17\", \"18-24\", \"25-34\", \"35-49\", \"50+\") sex_levels <- c(\"Male\", \"Female\")  df_as <- tibble(   sex = factor(c(rep(sex_levels[1], 6), rep(sex_levels[2], 6))),   age_group = factor(rep(age_levels, 2), levels = age_levels),   cases = round(runif(12, 20, 100)),   deaths = round(runif(12, 0, 20)), )  df_as #> # A tibble: 12 × 4 #>    sex    age_group cases deaths #>    <fct>  <fct>     <dbl>  <dbl> #>  1 Male   <5           26      1 #>  2 Male   5-17         87      6 #>  3 Male   18-24        68      8 #>  4 Male   25-34        33      4 #>  5 Male   35-49        21      8 #>  6 Male   50+          57      1 #>  7 Female <5           60      8 #>  8 Female 5-17         43     20 #>  9 Female 18-24        79      6 #> 10 Female 25-34        82     14 #> 11 Female 35-49        90     15 #> 12 Female 50+          34      4 # launch the module passing age, sex and count_var info launch_module(   module = \"person\",   df = df_as,   age_group_var = \"age_group\",   sex_var = \"sex\",   male_level = \"Male\",   female_level = \"Female\",   count_vars = c(\"cases\", \"deaths\") )"},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Contributing","text":"Contributions made pull-requests github fork source package, reviewed package maintainers.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"package-structure","dir":"Articles","previous_headings":"","what":"Package Structure","title":"Contributing","text":"current package structure 2 levels recursion: important directory R directory. source code package code contributions must live. contribute new module, create new R script inside directory number concise, informative name. Add module UI server functions script well helper functions specific module. general utility functions can added R/utils.R script.","code":". ├── DESCRIPTION ├── LICENSE ├── LICENSE.md ├── NAMESPACE ├── R │   ├── 01_time.R │   ├── 02_place.R │   ├── 03_person.R │   ├── 04_filter.R │   ├── 05_launch.R │   ├── utils.R │   └── zzz.R ├── README.Rmd ├── README.md ├── _pkgdown.yml ├── data │   ├── df_ll.rda │   └── sf_yem.rda ├── data-raw │   ├── data.R │   └── linelist-example.xlsx ├── epishiny.Rproj ├── inst │   ├── assets │   │   ├── img │   │   └── js │   └── examples │       ├── demo │       └── docs ├── man │   ├── figures │   │   ├── dashboard.png │   │   ├── person.png │   │   ├── place.png │   │   └── time.png │   ├── filter.Rd │   ├── launch_demo_dashboard.Rd │   ├── launch_module.Rd │   ├── person.Rd │   ├── place.Rd │   └── time.Rd └── vignettes     └── contributing.Rmd"},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"standards","dir":"Articles","previous_headings":"","what":"Standards","title":"Contributing","text":"New modules need meet certain criteria able work harmony modules package.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"user-interface","dir":"Articles","previous_headings":"Standards","what":"User Interface","title":"Contributing","text":"primary requirement use UI components bslib package. bslib provides modern UI toolkit Shiny R Markdown based Bootstrap. Default shiny UI uses old version Bootstrap (v3) bslib provides access newer versions (latest currently v5). package maintained Posit, authors shiny, now recommended shiny UI framework. See package website documentation available components. module produce single graphic table output, recommended use bslib::card() module UI wrapper. need multiple tabs within module use bslib::navset_card_tab(). See package’s card article details features. Don’t forget wrap input IDs module UI ns() namespace function. See existing module UI function examples.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"server","dir":"Articles","previous_headings":"Standards","what":"Server","title":"Contributing","text":"specific requirements module server code meet try efficienct fast possible.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"outputs","dir":"Articles","previous_headings":"Standards","what":"Outputs","title":"Contributing","text":"package currently uses highcharter package interactive graphics, leaflet interactive maps reactable gtsummary packages tables. recommended use one packages outputs, possible, maintain style functionality across modules, reduce number dependencies ().","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"dependencies","dir":"Articles","previous_headings":"Standards","what":"Dependencies","title":"Contributing","text":"Due large scope package number dependencies already large multiple htmlwidget libraries used. Efforts made keep include essential dependencies contribution. example, import library use single simple function, recommended code utility function within package avoid importing external package.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"code-style","dir":"Articles","previous_headings":"Standards","what":"Code style","title":"Contributing","text":"Please follow Tidyverse style guide much possible. Use styler package restyle code submitting pull-request.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/epishiny.html","id":"global-options","dir":"Articles","previous_headings":"","what":"Global options","title":"epishiny","text":"epishiny sets following global options start used across various modules. can change suit needs via options() function . Make sure epishiny loaded changes take effect.","code":"# first load libraries suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(sf)) suppressPackageStartupMessages(library(epishiny))  # then set your options. the options below are the defaults options(   epishiny.na.label = \"(Missing)\", # label to be used for NA values in outputs   epishiny.count.label = \"Patients\", # if data is un-aggregated, the label to represent row counts   epishiny.week.letter = \"W\", # letter to represent 'Week'. Change to S for 'Semaine' etc   epishiny.week.start = 1 # day the epiweek starts on. 1 = Monday, 7 = Sunday )"},{"path":"https://epicentre-msf.github.io/epishiny/articles/epishiny.html","id":"setting-up-data-for-epishiny","dir":"Articles","previous_headings":"","what":"Setting up data for epishiny","title":"epishiny","text":"epishiny can work either aggregated un-aggregated data. use example un-aggregated ‘linelist’ dataset. linelist (tidy) data format used public health data collection row representing individual (patient, participant, etc) column representing variable associated said individual. df_ll example dataset within package containing data fake measles outbreak Yemen. data contains temporal, demographic, geographic information patient, well medical indicators. geographical patient origin data contained adm columns, administrative boundary level Yemen. wan’t visualise data map need provide accompanying geo data can match linelist data. sf_yem, dataset within package, list containing geo boundary data adm1 adm2 levels Yemen, stored sf objects. Luckily can easily match linelist data via pcode columns. real world scenarios, might harmonious pcodes available data, need help matching messy epi data geo data, check hmatch package. Now let’s set geo data format required epishiny. use geo_layer() function define layer, since multiple layers case, combine list.","code":"glimpse(df_ll) #> Rows: 1,000 #> Columns: 30 #> $ case_id                         <chr> \"P0001\", \"P0002\", \"P0003\", \"P0004\", \"P… #> $ date_notification               <date> 2022-10-07, 2022-09-18, 2022-04-11, 2… #> $ date_symptom_start              <date> 2022-10-03, 2022-09-12, 2022-04-01, 2… #> $ date_hospitalisation_start      <date> NA, NA, 2022-04-14, 2022-04-20, 2022-… #> $ date_sample_occurred            <date> 2022-10-12, NA, NA, NA, 2022-08-09, 2… #> $ date_sample_lab_result_occurred <date> 2022-10-16, NA, NA, NA, 2022-08-10, 2… #> $ date_hospitalisation_end        <date> NA, NA, 2022-04-23, 2022-05-04, 2022-… #> $ sex_id                          <chr> \"Male\", \"Male\", \"Male\", NA, NA, \"Unkno… #> $ age_years                       <dbl> 42.00000000, 0.13150685, 36.00000000, … #> $ age_group                       <fct> 35-49, <5, 35-49, <5, 50+, <5, <5, NA,… #> $ adm1_origin                     <chr> \"Amran / عمران\", \"Raymah / ريمه\", \"Amr… #> $ adm2_origin                     <chr> \"Huth / حوث\", \"As Salafiyyah / السلفيه… #> $ adm3_origin                     <chr> \"Huth / حوث\", \"An Nubah / النوبه\", NA,… #> $ adm4_origin                     <chr> \"Tho Hamzah / ذو حمزه\", \"Al-Acamah Al-… #> $ adm1_pcode                      <chr> \"YE29\", \"YE31\", \"YE29\", \"YE29\", \"YE31\"… #> $ adm2_pcode                      <chr> \"YE2902\", \"YE3102\", \"YE2901\", \"YE2907\"… #> $ fever                           <chr> \"Yes\", \"Yes\", NA, \"Yes\", NA, \"Yes\", \"N… #> $ rash                            <chr> \"Yes\", \"Uncertain\", \"Uncertain\", \"No\",… #> $ cough                           <chr> \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", NA, \"… #> $ oral_lesions                    <chr> \"Uncertain\", \"No\", \"Yes\", \"Yes\", \"Unce… #> $ muac                            <chr> NA, \"Yellow (115 - 124 mm)\", \"Red (<11… #> $ oedema                          <chr> NA, NA, NA, \"+++ (feet, shins and face… #> $ hospitalised_yn                 <chr> \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", NA, \"… #> $ measles_stage                   <chr> \"Post-measles\", \"Acute measles\", \"Post… #> $ oxygen                          <chr> \"Yes\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\",… #> $ vacci_measles_yn                <chr> \"No\", \"No\", \"Yes - card\", \"Uncertain\",… #> $ vacci_measles_doses             <chr> \"2 doses\", \"Uncertain\", \"4 doses or mo… #> $ TDR_malaria                     <chr> \"Undetermined\", \"Positive\", \"Negative\"… #> $ outcome                         <chr> NA, \"Healed\", \"Deceased\", \"Healed\", \"H… #> $ death_cause                     <chr> \"Respiratory distress\", \"Respiratory d… sf_yem #> $adm1 #> Simple feature collection with 22 features and 5 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 41.81479 ymin: 12.10665 xmax: 54.5382 ymax: 19 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    adm0_iso3     adm0_name                   adm1_name pcode adm1_pop #> 1        YEM Yemen / اليمن                    Ibb / اب  YE11  3117999 #> 2        YEM Yemen / اليمن                Abyan / ابين  YE12   619003 #> 3        YEM Yemen / اليمن Sana'a City / امانة العاصمه  YE13  3981000 #> 4        YEM Yemen / اليمن          Al Bayda / البيضاء  YE14   830001 #> 5        YEM Yemen / اليمن                 Ta'iz / تعز  YE15  3487612 #> 6        YEM Yemen / اليمن             Al Jawf / الجوف  YE16   645000 #> 7        YEM Yemen / اليمن                Hajjah / حجه  YE17  2415001 #> 8        YEM Yemen / اليمن       Al Hodeidah / الحديده  YE18  3653999 #> 9        YEM Yemen / اليمن          Hadramawt / حضرموت  YE19  1618329 #> 10       YEM Yemen / اليمن               Dhamar / ذمار  YE20  2170000 #>                          geometry #> 1  MULTIPOLYGON (((44.08076 14... #> 2  MULTIPOLYGON (((46.29563 14... #> 3  MULTIPOLYGON (((44.3338 15.... #> 4  MULTIPOLYGON (((44.72676 14... #> 5  MULTIPOLYGON (((43.41111 12... #> 6  MULTIPOLYGON (((46.34001 17... #> 7  MULTIPOLYGON (((42.80233 15... #> 8  MULTIPOLYGON (((42.6918 13.... #> 9  MULTIPOLYGON (((50.83766 16... #> 10 MULTIPOLYGON (((44.70527 14... #>  #> $adm2 #> Simple feature collection with 335 features and 6 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 41.81479 ymin: 12.10665 xmax: 54.5382 ymax: 19 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    adm0_iso3     adm0_name adm1_name                  adm2_name  pcode adm2_pop #> 1        YEM Yemen / اليمن  Ibb / اب            Al Qafr / القفر YE1101   152248 #> 2        YEM Yemen / اليمن  Ibb / اب               Yarim / يريم YE1102   257878 #> 3        YEM Yemen / اليمن  Ibb / اب         Ar Radmah / الرضمه YE1103   111778 #> 4        YEM Yemen / اليمن  Ibb / اب       An Nadirah / النادره YE1104   108243 #> 5        YEM Yemen / اليمن  Ibb / اب         Ash Sha'ir / الشعر YE1105    58233 #> 6        YEM Yemen / اليمن  Ibb / اب          As Saddah / السده YE1106   119880 #> 7        YEM Yemen / اليمن  Ibb / اب      Al Makhadir / المخادر YE1107   166083 #> 8        YEM Yemen / اليمن  Ibb / اب             Hobeish / حبيش YE1108   152918 #> 9        YEM Yemen / اليمن  Ibb / اب Hazm Al Odayn / حزم العدين YE1109   115630 #> 10       YEM Yemen / اليمن  Ibb / اب Far' Al Odayn / فرع العدين YE1110   130477 #>                          geometry #> 1  MULTIPOLYGON (((43.82405 14... #> 2  MULTIPOLYGON (((44.2682 14.... #> 3  MULTIPOLYGON (((44.4855 14.... #> 4  MULTIPOLYGON (((44.4946 14.... #> 5  MULTIPOLYGON (((44.307 14.0... #> 6  MULTIPOLYGON (((44.44934 14... #> 7  MULTIPOLYGON (((44.22156 14... #> 8  MULTIPOLYGON (((44.01363 14... #> 9  MULTIPOLYGON (((44.05006 14... #> 10 MULTIPOLYGON (((43.80641 14... # setup geo data for adm1 and adm2 using the # geo_layer function to be passed to the place module # if population variable is provided, attack rates # will be shown on the map as a choropleth geo_data <- list(   geo_layer(     layer_name = \"Governorate\", # name of the boundary layer     sf = sf_yem$adm1, # sf object with boundary polygons     name_var = \"adm1_name\", # column with place names     pop_var = \"adm1_pop\", # column with population data (optional)     join_by = c(\"pcode\" = \"adm1_pcode\") # geo to data join vars: LHS = sf, RHS = data   ),   geo_layer(     layer_name = \"District\",     sf = sf_yem$adm2,     name_var = \"adm2_name\",     pop_var = \"adm2_pop\",     join_by = c(\"pcode\" = \"adm2_pcode\")   ) )"},{"path":"https://epicentre-msf.github.io/epishiny/articles/epishiny.html","id":"launching-modules","dir":"Articles","previous_headings":"","what":"Launching modules","title":"epishiny","text":"Now everything need launch time, place person modules. well use dashboards, epishiny module can launched individually within R script. example module passing minimum required arguments. See modules documentation (?time_server, ?place_server, ?person_server) full details features arguments can passed.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/epishiny.html","id":"time","dir":"Articles","previous_headings":"Launching modules","what":"Time","title":"epishiny","text":"","code":"launch_module(   module= \"time\",   df = df_ll,   date_vars = \"date_notification\" )"},{"path":"https://epicentre-msf.github.io/epishiny/articles/epishiny.html","id":"place","dir":"Articles","previous_headings":"Launching modules","what":"Place","title":"epishiny","text":"","code":"# launch place map module launch_module(   module = \"place\",   df = df_ll,   geo_data = geo_data )"},{"path":"https://epicentre-msf.github.io/epishiny/articles/epishiny.html","id":"person","dir":"Articles","previous_headings":"Launching modules","what":"Person","title":"epishiny","text":"","code":"launch_module(   module= \"person\",   df = df_ll,   age_group_var = \"age_group\",   sex_var = \"sex_id\",   male_level = \"Male\",   female_level = \"Female\" )"},{"path":"https://epicentre-msf.github.io/epishiny/articles/epishiny.html","id":"dashboards","dir":"Articles","previous_headings":"","what":"Dashboards","title":"epishiny","text":"epishiny modules can included shiny dashboard adding module_ui component shiny ui function, module_server component shiny server function. ’re new shiny, don’t worry, epishiny designed can build fully-featured dashboards without worrying happening shiny back-end. want learn , good place start Mastering Shiny book, authored Hadley Wickham. epishiny modules use UI elements bslib package, constraint use bslib dashboards user interface. See bslib shiny dashboards article full details designing UI bslib. full dashboard example incorporating epishiny modules bslib user interface.","code":"library(shiny) library(bslib) library(epishiny)  # example package data data(\"df_ll\") # linelist data(\"sf_yem\") # sf geo boundaries for Yemen admin 1 & 2  # setup geo data for adm1 and adm2 using the # geo_layer function to be passed to the place module # if population variable is provided, attack rates # will be shown on the map as a choropleth geo_data <- list(   geo_layer(     layer_name = \"Governorate\", # name of the boundary level     sf = sf_yem$adm1, # sf object with boundary polygons     name_var = \"adm1_name\", # column with place names     pop_var = \"adm1_pop\", # column with population data (optional)     join_by = c(\"pcode\" = \"adm1_pcode\") # geo to data join vars: LHS = sf, RHS = data   ),   geo_layer(     layer_name = \"District\",     sf = sf_yem$adm2,     name_var = \"adm2_name\",     pop_var = \"adm2_pop\",     join_by = c(\"pcode\" = \"adm2_pcode\")   ) )  # range of dates used in filter module to filter time period date_range <- range(df_ll$date_notification, na.rm = TRUE)  # define date variables in data as named list to be used in app date_vars <- c(   \"Date of notification\" = \"date_notification\",   \"Date of onset\" = \"date_symptom_start\",   \"Date of hospitalisation\" = \"date_hospitalisation_start\",   \"Date of outcome\" = \"date_hospitalisation_end\" )  # define categorical grouping variables # in data as named list to be used in app group_vars <- c(   \"Governorate\" = \"adm1_origin\",   \"Sex\" = \"sex_id\",   \"Hospitalised\" = \"hospitalised_yn\",   \"Vaccinated measles\" = \"vacci_measles_yn\",   \"Outcome\" = \"outcome\" )  # user interface ui <- page_sidebar(   title = \"epishiny\",   # sidebar   sidebar = filter_ui(     \"filter\",     group_vars = group_vars,     date_range = date_range,     period_lab = \"Notification period\"   ),   # main content   layout_columns(     col_widths = c(12, 7, 5),     place_ui(       id = \"map\",       geo_data = geo_data,       group_vars = group_vars     ),     time_ui(       id = \"curve\",       title = \"Time\",       date_vars = date_vars,       group_vars = group_vars,       ratio_line_lab = \"Show CFR line?\"     ),     person_ui(id = \"age_sex\")   ) )  # app server server <- function(input, output, session) {   app_data <- filter_server(     id = \"filter\",     df = df_ll,     date_var = \"date_notification\",     group_vars = group_vars   )   place_server(     id = \"map\",     df = reactive(app_data()$df),     geo_data = geo_data,     group_vars = group_vars,     filter_info = reactive(app_data()$filter_info)   )   time_server(     id = \"curve\",     df = reactive(app_data()$df),     date_vars = date_vars,     group_vars = group_vars,     show_ratio = TRUE,     ratio_var = \"outcome\",     ratio_lab = \"CFR\",     ratio_numer = \"Deceased\",     ratio_denom = c(\"Deceased\", \"Healed\", \"Abandonment\"),     filter_info = reactive(app_data()$filter_info)   )   person_server(     id = \"age_sex\",     df = reactive(app_data()$df),     age_var = \"age_years\",     sex_var = \"sex_id\",     male_level = \"Male\",     female_level = \"Female\",     filter_info = reactive(app_data()$filter_info)   ) }  # launch app if (interactive()) {   shinyApp(ui, server) }"},{"path":"https://epicentre-msf.github.io/epishiny/articles/linelist_data.html","id":"load-in-data","dir":"Articles","previous_headings":"","what":"Load in data","title":"Using epishiny with linelist data","text":"package comes built example line list df_ll, user can also bring data. use line list Ebola Sierra Leone published Fang et al. (2016).","code":"suppressPackageStartupMessages(library(\"readr\")) suppressPackageStartupMessages(library(\"dplyr\")) suppressPackageStartupMessages(library(\"purrr\")) suppressPackageStartupMessages(library(\"sf\")) suppressPackageStartupMessages(library(\"epishiny\"))  url <- paste(   \"https://raw.githubusercontent.com/parksw3/epidist-paper/main/data-raw/\",   \"pnas.1518587113.sd02.csv\",   sep = \"/\" ) df <- read_csv(url) #> Rows: 8358 Columns: 8 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (6): Name, Sex, Date of symptom onset, Date of sample tested, District, ... #> dbl (2): ID, Age #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. glimpse(df) #> Rows: 8,358 #> Columns: 8 #> $ ID                      <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,… #> $ Name                    <chr> \"*****\", \"*****\", \"*****\", \"*****\", \"*****\", \"… #> $ Age                     <dbl> 20, 42, 45, 15, 19, 55, 50, 8, 54, 57, 50, 27,… #> $ Sex                     <chr> \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"… #> $ `Date of symptom onset` <chr> \"18-May-14\", \"20-May-14\", \"20-May-14\", \"21-May… #> $ `Date of sample tested` <chr> \"23-May-14\", \"25-May-14\", \"25-May-14\", \"26-May… #> $ District                <chr> \"Kailahun\", \"Kailahun\", \"Kailahun\", \"Kailahun\"… #> $ Chiefdom                <chr> \"Kissi Teng\", \"Kissi Teng\", \"Kissi Tonge\", \"Ki…"},{"path":"https://epicentre-msf.github.io/epishiny/articles/linelist_data.html","id":"set-up-geo-data","dir":"Articles","previous_headings":"","what":"Set up geo data","title":"Using epishiny with linelist data","text":"next need geological data want show maps. geoBoundaries host sub-national administrative boundary shapefiles various formats every country world github. line list contains Districts (admin 2 level) Chiefdoms (admin 3 level). can download corresponding data sets geoBoundaries via following URLs.","code":"shape_paths <- list(   adm2 = \"https://github.com/wmgeolab/geoBoundaries/raw/905b0ba/releaseData/gbHumanitarian/SLE/ADM2/geoBoundaries-SLE-ADM2_simplified.geojson\",   adm3 = \"https://github.com/wmgeolab/geoBoundaries/raw/905b0ba/releaseData/gbHumanitarian/SLE/ADM3/geoBoundaries-SLE-ADM3_simplified.geojson\" )  shapes <- map(shape_paths, st_read) #> Reading layer `geoBoundaries-SLE-ADM2_simplified' from data source  #>   `https://github.com/wmgeolab/geoBoundaries/raw/905b0ba/releaseData/gbHumanitarian/SLE/ADM2/geoBoundaries-SLE-ADM2_simplified.geojson'  #>   using driver `GeoJSON' #> Simple feature collection with 14 features and 5 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -13.30893 ymin: 6.923379 xmax: -10.27056 ymax: 9.999253 #> Geodetic CRS:  WGS 84 #> Reading layer `geoBoundaries-SLE-ADM3_simplified' from data source  #>   `https://github.com/wmgeolab/geoBoundaries/raw/905b0ba/releaseData/gbHumanitarian/SLE/ADM3/geoBoundaries-SLE-ADM3_simplified.geojson'  #>   using driver `GeoJSON' #> Simple feature collection with 167 features and 5 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -13.30901 ymin: 6.923379 xmax: -10.27056 ymax: 9.999253 #> Geodetic CRS:  WGS 84  # little bit of cleaning on district names to match with data shapes$adm2$shapeName <- gsub(\"Area \", \"\", shapes$adm2$shapeName)  map(shapes, head) #> $adm2 #> Simple feature collection with 6 features and 5 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -13.30893 ymin: 7.340922 xmax: -10.27056 ymax: 9.999253 #> Geodetic CRS:  WGS 84 #>   shapeName shapeISO                 shapeID shapeGroup shapeType #> 1  Kailahun          92492822B20773800307824        SLE      ADM2 #> 2    Kenema          92492822B72931932323564        SLE      ADM2 #> 3      Kono          92492822B77765797687755        SLE      ADM2 #> 4   Bombali          92492822B76753077936535        SLE      ADM2 #> 5    Kambia          92492822B57757993837772        SLE      ADM2 #> 6 Koinadugu          92492822B53659457212824        SLE      ADM2 #>                         geometry #> 1 MULTIPOLYGON (((-10.80489 7... #> 2 MULTIPOLYGON (((-10.85505 8... #> 3 MULTIPOLYGON (((-10.64344 8... #> 4 MULTIPOLYGON (((-12.32046 8... #> 5 MULTIPOLYGON (((-13.2635 8.... #> 6 MULTIPOLYGON (((-10.58741 9... #>  #> $adm3 #> Simple feature collection with 6 features and 5 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -11.02525 ymin: 7.758386 xmax: -10.27056 ymax: 8.505881 #> Geodetic CRS:  WGS 84 #>      shapeName shapeISO                 shapeID shapeGroup shapeType #> 1          Dea          93885176B88884577288656        SLE      ADM3 #> 2        Jawie          93885176B40623889028536        SLE      ADM3 #> 3   Kissi Kama          93885176B21354692554384        SLE      ADM3 #> 4   Kissi Teng          93885176B65469407152324        SLE      ADM3 #> 5  Kissi Tongi          93885176B56250152587449        SLE      ADM3 #> 6 Kpeje Bongre          93885176B52534318264914        SLE      ADM3 #>                         geometry #> 1 MULTIPOLYGON (((-10.60592 7... #> 2 MULTIPOLYGON (((-10.91103 7... #> 3 MULTIPOLYGON (((-10.43962 8... #> 4 MULTIPOLYGON (((-10.43962 8... #> 5 MULTIPOLYGON (((-10.39938 8... #> 6 MULTIPOLYGON (((-10.8119 8...."},{"path":"https://epicentre-msf.github.io/epishiny/articles/linelist_data.html","id":"launch-modules","dir":"Articles","previous_headings":"","what":"Launch Modules","title":"Using epishiny with linelist data","text":"launch modules can define grouping variables. passed time place modules, select input appear ‘options’ dropdown allowing group data variables select. want readable variable label appear module rather variable name , pass named vector name label value variable name. example use sex district variable, since already formatted labels need pass names:","code":"group_vars <- c(\"Sex\", \"District\")"},{"path":"https://epicentre-msf.github.io/epishiny/articles/linelist_data.html","id":"place-module","dir":"Articles","previous_headings":"Launch Modules","what":"Place module","title":"Using epishiny with linelist data","text":"Now shapefiles can collate information contained format epishiny expects using geo_layer() function. Since using one geo layer, combine list: use launch place module: select Chiefdom admin 3 level options dropdown menu see warning meassage informing 50% cases matched shapefile, matching disparate place names required case. won’t need help task check hmatch package.","code":"geo_data <- list(   geo_layer(     layer_name = \"District\",     sf = shapes$adm2,     name_var = \"shapeName\",     join_by = c(\"shapeName\" = \"District\")   ),   geo_layer(     layer_name = \"Chiefdom\",     sf = shapes$adm3,     name_var = \"shapeName\",     join_by = c(\"shapeName\" = \"Chiefdom\")   ) ) launch_module(   module = \"place\",   df = df,   geo_data = geo_data,   group_vars = group_vars[1] # only pass sex variable since district is already visualised on map )"},{"path":"https://epicentre-msf.github.io/epishiny/articles/linelist_data.html","id":"time-module","dir":"Articles","previous_headings":"Launch Modules","what":"Time module","title":"Using epishiny with linelist data","text":"launch time module, need pass date variable(s) line list want use x-axis. Notice date variables character class data automatically parsed date class time module via lubridate::as_date function.","code":"launch_module(   module = \"time\",   df = df,   date_vars = c(\"Date of symptom onset\", \"Date of sample tested\"),   group_vars = group_vars )"},{"path":"https://epicentre-msf.github.io/epishiny/articles/linelist_data.html","id":"person-module","dir":"Articles","previous_headings":"Launch Modules","what":"Person module","title":"Using epishiny with linelist data","text":"Finally, can plot age/sex pyramid using person module, passing age sex variable names levels sex variable encode male female:","code":"launch_module(   module = \"person\",   df = df,   age_var = \"Age\",   sex_var = \"Sex\",   male_level = \"M\",   female_level = \"F\" )"},{"path":[]},{"path":"https://epicentre-msf.github.io/epishiny/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Cambpell. Author, maintainer.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cambpell P (2025). epishiny: Tools interactive visualisation epidemiological data. R package version 0.0.0.9000, https://epicentre-msf.github.io/epishiny/, https://github.com/epicentre-msf/epishiny.","code":"@Manual{,   title = {epishiny: Tools for interactive visualisation of epidemiological data},   author = {Paul Cambpell},   year = {2025},   note = {R package version 0.0.0.9000, https://epicentre-msf.github.io/epishiny/},   url = {https://github.com/epicentre-msf/epishiny}, }"},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"epishiny-","dir":"","previous_headings":"","what":"Tools for interactive visualisation of epidemiological data","title":"Tools for interactive visualisation of epidemiological data","text":"Please note package alpha stage development yet suitable use production API likely change.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Tools for interactive visualisation of epidemiological data","text":"Interactive web-based data visualisations dashboards increasingly common method monitoring infectious disease outbreaks. Whilst R now commonly used tool analysis data visualisation epidemiology, epidemiologists often lack knowledge required able produce interactive dashboards directly within R workflows, resulting external propriatory software used instead. epishiny aims bridge gap providing simple functions produce engaging, feature-rich interactive visualisations dashboards epidemiological data using R’s shiny web-framework.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for interactive visualisation of epidemiological data","text":"can install development version epishiny GitHub either pak remotes package:","code":"# install.packages(\"pak\") pak::pkg_install(\"epicentre-msf/epishiny\", dependencies = TRUE)  # install.packages(\"remotes\") remotes::install_github(\"epicentre-msf/epishiny\", dependencies = TRUE)"},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"demo-dashboard","dir":"","previous_headings":"","what":"Demo Dashboard","title":"Tools for interactive visualisation of epidemiological data","text":"Launch demo dashboard examples every epishiny module launch_demo_dashboard() function. code dashboard can found inst/examples/demo package repository.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"Tools for interactive visualisation of epidemiological data","text":"See articles package website get started using epishiny data. Getting started Linelist data Aggregated data","code":""},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Tools for interactive visualisation of epidemiological data","text":"Contributions welcome. See contributing article package website details contribute epishiny.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/df_ll.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Linelist Data — df_ll","title":"Example Linelist Data — df_ll","text":"'linelist' (tidy) data format used public health data collection row representing individual (patient, participant, etc) column representing variable associated said individual.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/df_ll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Linelist Data — df_ll","text":"","code":"df_ll"},{"path":"https://epicentre-msf.github.io/epishiny/reference/df_ll.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Linelist Data — df_ll","text":"tibble dataframe","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/df_ll.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Linelist Data — df_ll","text":"df_ll example linelist dataset containing data fake measles outbreak Yemen. data contains temporal, demographic, geographic information patient, well medical indicators.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/df_ll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Linelist Data — df_ll","text":"","code":"df_ll #> # A tibble: 1,000 × 30 #>    case_id date_notification date_symptom_start date_hospitalisation_start #>    <chr>   <date>            <date>             <date>                     #>  1 P0001   2022-10-07        2022-10-03         NA                         #>  2 P0002   2022-09-18        2022-09-12         NA                         #>  3 P0003   2022-04-11        2022-04-01         2022-04-14                 #>  4 P0004   2022-04-16        2022-04-11         2022-04-20                 #>  5 P0005   2022-08-05        2022-07-29         2022-08-09                 #>  6 P0006   2022-10-06        2022-09-30         NA                         #>  7 P0007   2022-08-01        2022-07-29         NA                         #>  8 P0008   2022-08-06        2022-07-30         2022-08-11                 #>  9 P0009   2022-05-06        2022-04-30         2022-05-09                 #> 10 P0010   2022-10-13        2022-10-11         NA                         #> # ℹ 990 more rows #> # ℹ 26 more variables: date_sample_occurred <date>, #> #   date_sample_lab_result_occurred <date>, date_hospitalisation_end <date>, #> #   sex_id <chr>, age_years <dbl>, age_group <fct>, adm1_origin <chr>, #> #   adm2_origin <chr>, adm3_origin <chr>, adm4_origin <chr>, adm1_pcode <chr>, #> #   adm2_pcode <chr>, fever <chr>, rash <chr>, cough <chr>, oral_lesions <chr>, #> #   muac <chr>, oedema <chr>, hospitalised_yn <chr>, measles_stage <chr>, …"},{"path":"https://epicentre-msf.github.io/epishiny/reference/filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter module — filter_ui","title":"Filter module — filter_ui","text":"Filter linelist data using sidebar shiny inputs.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter module — filter_ui","text":"","code":"filter_ui(   id,   group_vars,   date_range,   title = NULL,   date_filters_lab = \"Date filters\",   period_lab = \"Period\",   missing_dates_lab = \"Include patients with missing dates?\",   group_filters_lab = \"Group filters\",   filter_btn_lab = \"Filter\",   reset_btn_lab = \"Reset\" )  filter_server(   id,   df,   date_var,   group_vars,   time_filter = shiny::reactiveVal(),   place_filter = shiny::reactiveVal(),   na_label = getOption(\"epishiny.na.label\", \"(Missing)\") )"},{"path":"https://epicentre-msf.github.io/epishiny/reference/filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter module — filter_ui","text":"id Module id. Must UI server function link two. group_vars named character vector categorical variables data grouping input. Names used variable labels. date_range vector containing minimum maximum dates date range input. title title sidebar. date_filters_lab label date filters accordion panel. period_lab label date range input. missing_dates_lab label include missing dates checkbox. group_filters_lab label group filters accordion panel. filter_btn_lab label filter data button. reset_btn_lab label reset filters button. df Data frame tibble patient level aggregated data. Can either shiny reactive static dataset. date_var name date variable data frame filtered . time_filter supply output time_server() wrapped shiny::reactive() add filter information filter sidebar place_filter supply output place_server() wrapped shiny::reactive() add filter information filter sidebar na_label label use missing values group variables.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter module — filter_ui","text":"bslib::sidebar UI element date filters, group filters, action buttons. server function returns filtered data formatted text string filter information named df filter_info respectively reactive list. passed arguments name time, place person modules wrapped shiny::reactive()","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter module — filter_ui","text":"","code":"library(shiny) library(bslib) #>  #> Attaching package: ‘bslib’ #> The following object is masked from ‘package:utils’: #>  #>     page library(epishiny)  # example package data data(\"df_ll\") # linelist data(\"sf_yem\") # sf geo boundaries for Yemen admin 1 & 2  # setup geo data for adm1 and adm2 using the # geo_layer function to be passed to the place module # if population variable is provided, attack rates # will be shown on the map as a choropleth geo_data <- list(   geo_layer(     layer_name = \"Governorate\", # name of the boundary level     sf = sf_yem$adm1, # sf object with boundary polygons     name_var = \"adm1_name\", # column with place names     pop_var = \"adm1_pop\", # column with population data (optional)     join_by = c(\"pcode\" = \"adm1_pcode\") # geo to data join vars: LHS = sf, RHS = data   ),   geo_layer(     layer_name = \"District\",     sf = sf_yem$adm2,     name_var = \"adm2_name\",     pop_var = \"adm2_pop\",     join_by = c(\"pcode\" = \"adm2_pcode\")   ) )  # range of dates used in filter module to filter time period date_range <- range(df_ll$date_notification, na.rm = TRUE)  # define date variables in data as named list to be used in app date_vars <- c(   \"Date of notification\" = \"date_notification\",   \"Date of onset\" = \"date_symptom_start\",   \"Date of hospitalisation\" = \"date_hospitalisation_start\",   \"Date of outcome\" = \"date_hospitalisation_end\" )  # define categorical grouping variables # in data as named list to be used in app group_vars <- c(   \"Governorate\" = \"adm1_origin\",   \"Sex\" = \"sex_id\",   \"Hospitalised\" = \"hospitalised_yn\",   \"Vaccinated measles\" = \"vacci_measles_yn\",   \"Outcome\" = \"outcome\" )  # user interface ui <- page_sidebar(   title = \"epishiny\",   # sidebar   sidebar = filter_ui(     \"filter\",     group_vars = group_vars,     date_range = date_range,     period_lab = \"Notification period\"   ),   # main content   layout_columns(     col_widths = c(12, 7, 5),     place_ui(       id = \"map\",       geo_data = geo_data,       group_vars = group_vars     ),     time_ui(       id = \"curve\",       title = \"Time\",       date_vars = date_vars,       group_vars = group_vars,       ratio_line_lab = \"Show CFR line?\"     ),     person_ui(id = \"age_sex\")   ) )  # app server server <- function(input, output, session) {   app_data <- filter_server(     id = \"filter\",     df = df_ll,     date_var = \"date_notification\",     group_vars = group_vars   )   place_server(     id = \"map\",     df = reactive(app_data()$df),     geo_data = geo_data,     group_vars = group_vars,     filter_info = reactive(app_data()$filter_info)   )   time_server(     id = \"curve\",     df = reactive(app_data()$df),     date_vars = date_vars,     group_vars = group_vars,     show_ratio = TRUE,     ratio_var = \"outcome\",     ratio_lab = \"CFR\",     ratio_numer = \"Deceased\",     ratio_denom = c(\"Deceased\", \"Healed\", \"Abandonment\"),     filter_info = reactive(app_data()$filter_info)   )   person_server(     id = \"age_sex\",     df = reactive(app_data()$df),     age_var = \"age_years\",     sex_var = \"sex_id\",     male_level = \"Male\",     female_level = \"Female\",     filter_info = reactive(app_data()$filter_info)   ) }  # launch app if (interactive()) {   shinyApp(ui, server) }"},{"path":"https://epicentre-msf.github.io/epishiny/reference/geo_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a geo layer to be used in the 'place' module — geo_layer","title":"Build a geo layer to be used in the 'place' module — geo_layer","text":"Build geo layer used 'place' module","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/geo_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a geo layer to be used in the 'place' module — geo_layer","text":"","code":"geo_layer(layer_name, sf, name_var, join_by, pop_var = NULL)"},{"path":"https://epicentre-msf.github.io/epishiny/reference/geo_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a geo layer to be used in the 'place' module — geo_layer","text":"layer_name name geo layer, example 'State', 'Department', 'Admin2' etc. providing multiple layers, layer names must unique. sf geographical data class 'sf' (simple features). name_var character string variable name sf containing names geographical feature. join_by data join specification join geo layer dataset. either single variable name present datasets named vector name geo layer join variable value join variable dataset. .e. c(\"pcode\" = \"place_code\") LHS = geo, RHS = data. pop_var character string variable name sf containing population data feature. provided, attack rates shown map choropleth.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/geo_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a geo layer to be used in the 'place' module — geo_layer","text":"named list class \"epishiny_geo_layer\"","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/geo_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a geo layer to be used in the 'place' module — geo_layer","text":"","code":"geo_layer(   layer_name = \"Governorate\",   sf = sf_yem$adm1,   name_var = \"adm1_name\",   pop_var = \"adm1_pop\",   join_by = c(\"pcode\" = \"adm1_pcode\") ) #> $layer_name #> [1] \"Governorate\" #>  #> $sf #> Simple feature collection with 22 features and 7 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 41.81479 ymin: 12.10665 xmax: 54.5382 ymax: 19 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    adm0_iso3     adm0_name                   adm1_name pcode adm1_pop #> 1        YEM Yemen / اليمن                    Ibb / اب  YE11  3117999 #> 2        YEM Yemen / اليمن                Abyan / ابين  YE12   619003 #> 3        YEM Yemen / اليمن Sana'a City / امانة العاصمه  YE13  3981000 #> 4        YEM Yemen / اليمن          Al Bayda / البيضاء  YE14   830001 #> 5        YEM Yemen / اليمن                 Ta'iz / تعز  YE15  3487612 #> 6        YEM Yemen / اليمن             Al Jawf / الجوف  YE16   645000 #> 7        YEM Yemen / اليمن                Hajjah / حجه  YE17  2415001 #> 8        YEM Yemen / اليمن       Al Hodeidah / الحديده  YE18  3653999 #> 9        YEM Yemen / اليمن          Hadramawt / حضرموت  YE19  1618329 #> 10       YEM Yemen / اليمن               Dhamar / ذمار  YE20  2170000 #>                          geometry      lon      lat #> 1  MULTIPOLYGON (((44.08076 14... 44.18040 14.08362 #> 2  MULTIPOLYGON (((46.29563 14... 46.23681 13.63099 #> 3  MULTIPOLYGON (((44.3338 15.... 44.17556 15.40928 #> 4  MULTIPOLYGON (((44.72676 14... 45.27953 14.32562 #> 5  MULTIPOLYGON (((43.41111 12... 43.78494 13.29334 #> 6  MULTIPOLYGON (((46.34001 17... 45.59372 16.59384 #> 7  MULTIPOLYGON (((42.80233 15... 43.20314 16.09100 #> 8  MULTIPOLYGON (((42.6918 13.... 43.21762 14.78216 #> 9  MULTIPOLYGON (((50.83766 16... 48.63126 16.52279 #> 10 MULTIPOLYGON (((44.70527 14... 44.30275 14.54205 #>  #> $name_var #> [1] \"adm1_name\" #>  #> $pop_var #> [1] \"adm1_pop\" #>  #> $join_by #>        pcode  #> \"adm1_pcode\"  #>  #> attr(,\"class\") #> [1] \"epishiny_geo_layer\""},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_demo_dashboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch epishiny demo dashboard — launch_demo_dashboard","title":"Launch epishiny demo dashboard — launch_demo_dashboard","text":"See example type dashboard can build using epishiny modules within bslib UI.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_demo_dashboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch epishiny demo dashboard — launch_demo_dashboard","text":"","code":"launch_demo_dashboard()"},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_demo_dashboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch epishiny demo dashboard — launch_demo_dashboard","text":"return value, shiny app launched.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_demo_dashboard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch epishiny demo dashboard — launch_demo_dashboard","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   library(epishiny)   launch_demo_dashboard() }"},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch a single 'epishiny' module as a standalone shiny app — launch_module","title":"Launch a single 'epishiny' module as a standalone shiny app — launch_module","text":"Use function quickly launch 3 'epishiny' interactive visualisation modules (time, place, person) independently, allowing incorporation exploratory data analysis workflows R.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch a single 'epishiny' module as a standalone shiny app — launch_module","text":"","code":"launch_module(module = c(\"time\", \"place\", \"person\"), ...)"},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch a single 'epishiny' module as a standalone shiny app — launch_module","text":"module Name module launch. Current options \"time\", \"place\" \"person\". ... named arguments passed relevant module UI Server functions. See module's documentation details arguments required.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch a single 'epishiny' module as a standalone shiny app — launch_module","text":"return value, shiny app launched.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch a single 'epishiny' module as a standalone shiny app — launch_module","text":"","code":"library(shiny) library(epishiny)  # example package data data(\"df_ll\") data(\"sf_yem\")  # setup geo data for adm1 and adm2 using the # geo_layer function to be passed to the place module # if population variable is provided, attack rates # will be shown on the map as a choropleth geo_data <- list(   geo_layer(     layer_name = \"Governorate\", # name of the boundary level     sf = sf_yem$adm1, # sf object with boundary polygons     name_var = \"adm1_name\", # column with place names     pop_var = \"adm1_pop\", # column with population data (optional)     join_by = c(\"pcode\" = \"adm1_pcode\") # geo to data join vars: LHS = sf, RHS = data   ),   geo_layer(     layer_name = \"District\",     sf = sf_yem$adm2,     name_var = \"adm2_name\",     pop_var = \"adm2_pop\",     join_by = c(\"pcode\" = \"adm2_pcode\")   ) )  # define date variables in data as named list to be used in app date_vars <- c(   \"Date of notification\" = \"date_notification\",   \"Date of onset\" = \"date_symptom_start\",   \"Date of hospitalisation\" = \"date_hospitalisation_start\",   \"Date of outcome\" = \"date_hospitalisation_end\" )  # define categorical grouping variables # in data as named list to be used in app group_vars <- c(   \"Governorate\" = \"adm1_origin\",   \"Sex\" = \"sex_id\",   \"Hospitalised\" = \"hospitalised_yn\",   \"Vaccinated measles\" = \"vacci_measles_yn\",   \"Outcome\" = \"outcome\" )  # launch time epicurve module if (interactive()) {   launch_module(     module = \"time\",     df = df_ll,     date_vars = date_vars,     group_vars = group_vars,     show_ratio = TRUE,     ratio_line_lab = \"Show CFR line?\",     ratio_var = \"outcome\",     ratio_lab = \"CFR\",     ratio_numer = \"Deceased\",     ratio_denom = c(\"Deceased\", \"Healed\", \"Abandonment\")   ) }  # launch place map module if (interactive()) {   launch_module(     module = \"place\",     df = df_ll,     geo_data = geo_data,     group_vars = group_vars   ) }  # launch person age/sex pyramid module if (interactive()) {   launch_module(     module = \"person\",     df = df_ll,     age_var = \"age_years\",     sex_var = \"sex_id\",     male_level = \"Male\",     female_level = \"Female\"   ) }"},{"path":"https://epicentre-msf.github.io/epishiny/reference/person.html","id":null,"dir":"Reference","previous_headings":"","what":"Person module — person_ui","title":"Person module — person_ui","text":"Visualise age sex demographics population pyramid chart summary table.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/person.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Person module — person_ui","text":"","code":"person_ui(   id,   count_vars = NULL,   title = \"Person\",   icon = bsicons::bs_icon(\"people-fill\"),   opts_btn_lab = \"options\",   count_vars_lab = \"Indicator\",   full_screen = TRUE )  person_server(   id,   df,   sex_var,   male_level,   female_level,   age_group_var = NULL,   age_var = NULL,   count_vars = NULL,   age_breaks = c(0, 5, 18, 25, 35, 50, Inf),   age_labels = c(\"<5\", \"5-17\", \"18-24\", \"25-34\", \"35-49\", \"50+\"),   age_var_lab = \"Age (years)\",   age_group_lab = \"Age group\",   n_lab = \"N patients\",   colours = c(\"#19a0aa\", \"#f15f36\"),   filter_info = shiny::reactiveVal(),   time_filter = shiny::reactiveVal(),   place_filter = shiny::reactiveVal() )"},{"path":"https://epicentre-msf.github.io/epishiny/reference/person.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Person module — person_ui","text":"id Module id. Must UI server function link two. count_vars data aggregated, variable name(s) count variable(s) data. one variable provided, select input appear options dropdown. named, names used variable labels. title title card. icon icon display next title. opts_btn_lab label options button. count_vars_lab text label aggregate count variables input. full_screen Add button card option enter full screen mode? df Data frame tibble patient level aggregated data. Can either shiny reactive static dataset. sex_var name sex variable data. male_level level representing males sex variable. female_level level representing females sex variable. age_group_var name character/factor variable data age groups. specified, age_var ignored. age_var name numeric age variable data. ages already binned groups, use age_group_var instead. age_breaks numeric vector specifying age breaks age groups. age_labels Labels corresponding age breaks. age_var_lab label age variable. age_group_lab label age group variable. n_lab label raw count variable. colours Vector 2 colours represent male female, respectively. filter_info contained within app using filter_server(), supply filter_info object returned function wrapped shiny::reactive() add filter information chart exports. time_filter supply output time_server() wrapped shiny::reactive() filter data click events time module bar chart (clicking bar filter data period bar represents) place_filter supply output place_server() wrapped shiny::reactive() filter data click events place module map (clicking polygon filter data clicked region)","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/person.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Person module — person_ui","text":"bslib::navset_card_tab UI element chart table tabs.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/person.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Person module — person_ui","text":"","code":"library(shiny) library(bslib) library(epishiny)  # example package data data(\"df_ll\") # linelist data(\"sf_yem\") # sf geo boundaries for Yemen admin 1 & 2  # setup geo data for adm1 and adm2 using the # geo_layer function to be passed to the place module # if population variable is provided, attack rates # will be shown on the map as a choropleth geo_data <- list(   geo_layer(     layer_name = \"Governorate\", # name of the boundary level     sf = sf_yem$adm1, # sf object with boundary polygons     name_var = \"adm1_name\", # column with place names     pop_var = \"adm1_pop\", # column with population data (optional)     join_by = c(\"pcode\" = \"adm1_pcode\") # geo to data join vars: LHS = sf, RHS = data   ),   geo_layer(     layer_name = \"District\",     sf = sf_yem$adm2,     name_var = \"adm2_name\",     pop_var = \"adm2_pop\",     join_by = c(\"pcode\" = \"adm2_pcode\")   ) )  # range of dates used in filter module to filter time period date_range <- range(df_ll$date_notification, na.rm = TRUE)  # define date variables in data as named list to be used in app date_vars <- c(   \"Date of notification\" = \"date_notification\",   \"Date of onset\" = \"date_symptom_start\",   \"Date of hospitalisation\" = \"date_hospitalisation_start\",   \"Date of outcome\" = \"date_hospitalisation_end\" )  # define categorical grouping variables # in data as named list to be used in app group_vars <- c(   \"Governorate\" = \"adm1_origin\",   \"Sex\" = \"sex_id\",   \"Hospitalised\" = \"hospitalised_yn\",   \"Vaccinated measles\" = \"vacci_measles_yn\",   \"Outcome\" = \"outcome\" )  # user interface ui <- page_sidebar(   title = \"epishiny\",   # sidebar   sidebar = filter_ui(     \"filter\",     group_vars = group_vars,     date_range = date_range,     period_lab = \"Notification period\"   ),   # main content   layout_columns(     col_widths = c(12, 7, 5),     place_ui(       id = \"map\",       geo_data = geo_data,       group_vars = group_vars     ),     time_ui(       id = \"curve\",       title = \"Time\",       date_vars = date_vars,       group_vars = group_vars,       ratio_line_lab = \"Show CFR line?\"     ),     person_ui(id = \"age_sex\")   ) )  # app server server <- function(input, output, session) {   app_data <- filter_server(     id = \"filter\",     df = df_ll,     date_var = \"date_notification\",     group_vars = group_vars   )   place_server(     id = \"map\",     df = reactive(app_data()$df),     geo_data = geo_data,     group_vars = group_vars,     filter_info = reactive(app_data()$filter_info)   )   time_server(     id = \"curve\",     df = reactive(app_data()$df),     date_vars = date_vars,     group_vars = group_vars,     show_ratio = TRUE,     ratio_var = \"outcome\",     ratio_lab = \"CFR\",     ratio_numer = \"Deceased\",     ratio_denom = c(\"Deceased\", \"Healed\", \"Abandonment\"),     filter_info = reactive(app_data()$filter_info)   )   person_server(     id = \"age_sex\",     df = reactive(app_data()$df),     age_var = \"age_years\",     sex_var = \"sex_id\",     male_level = \"Male\",     female_level = \"Female\",     filter_info = reactive(app_data()$filter_info)   ) }  # launch app if (interactive()) {   shinyApp(ui, server) }"},{"path":"https://epicentre-msf.github.io/epishiny/reference/place.html","id":null,"dir":"Reference","previous_headings":"","what":"Place module — place_ui","title":"Place module — place_ui","text":"Visualise geographical distribution across multiple administrative boundaries interactive leaflet map.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/place.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Place module — place_ui","text":"","code":"place_ui(   id,   geo_data,   count_vars = NULL,   group_vars = NULL,   title = \"Place\",   icon = bsicons::bs_icon(\"geo-fill\"),   tooltip = NULL,   geo_lab = \"Geo boundaries\",   count_vars_lab = \"Indicator\",   groups_lab = \"Group data by\",   no_grouping_lab = \"No grouping\",   circle_size_lab = \"Circle size multiplyer\",   opts_btn_lab = \"options\",   download_lab = \"download\",   full_screen = TRUE )  place_server(   id,   df,   geo_data,   count_vars = NULL,   group_vars = NULL,   show_parent_borders = FALSE,   choro_lab = \"Rate /100 000\",   choro_pal = \"Reds\",   choro_opacity = 0.7,   export_width = 1200,   export_height = 650,   time_filter = shiny::reactiveVal(),   filter_info = shiny::reactiveVal(),   filter_reset = shiny::reactiveVal() )"},{"path":"https://epicentre-msf.github.io/epishiny/reference/place.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Place module — place_ui","text":"id Module id. Must UI server function link two. geo_data list named lists containing spatial sf dataframes information different geographical levels. count_vars data aggregated, variable name(s) count variable(s) data. one variable provided, select input appear options dropdown. named, names used variable labels. group_vars Character vector categorical variable names. provided, select input appear options dropdown allowing data groups visualised map pie charts per geographical unit. named, names used variable labels. title title card. icon icon displayed next title tooltip additional title hover text information geo_lab label geographical level selection. count_vars_lab text label aggregate count variables input. groups_lab label group data selection. no_grouping_lab text label grouping option grouping input. circle_size_lab text label circle size slider input. opts_btn_lab text label dropdown menu button. download_lab text label download button. full_screen Add button card option enter full screen mode? df Data frame tibble patient level aggregated data. Can either shiny reactive static dataset. show_parent_borders Show borders parent boundary levels? choro_lab Label attack rate choropleth (applicable geo_data contains population data) choro_pal Colour palette passed leaflet::colorBin() attack rate choropleth (applicable geo_data contains population data) choro_opacity Opacity choropleth colour (applicable geo_data contains population data) export_width width exported map image. export_height height exported map image. time_filter supply output time_server() wrapped shiny::reactive() filter data click events time module bar chart (clicking bar filter data period bar represents) filter_info contained within app using filter_server(), supply filter_info object returned function wrapped shiny::reactive() add filter information chart exports. filter_reset contained within app using filter_server(), supply filter_reset object returned function wrapped shiny::reactive() reset click event filters set module.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/place.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Place module — place_ui","text":"bslib::card UI element options download button leaflet map. server function returns leaflet map's shape click information list.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/place.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Place module — place_ui","text":"","code":"library(shiny) library(bslib) library(epishiny)  # example package data data(\"df_ll\") # linelist data(\"sf_yem\") # sf geo boundaries for Yemen admin 1 & 2  # setup geo data for adm1 and adm2 using the # geo_layer function to be passed to the place module # if population variable is provided, attack rates # will be shown on the map as a choropleth geo_data <- list(   geo_layer(     layer_name = \"Governorate\", # name of the boundary level     sf = sf_yem$adm1, # sf object with boundary polygons     name_var = \"adm1_name\", # column with place names     pop_var = \"adm1_pop\", # column with population data (optional)     join_by = c(\"pcode\" = \"adm1_pcode\") # geo to data join vars: LHS = sf, RHS = data   ),   geo_layer(     layer_name = \"District\",     sf = sf_yem$adm2,     name_var = \"adm2_name\",     pop_var = \"adm2_pop\",     join_by = c(\"pcode\" = \"adm2_pcode\")   ) )  # range of dates used in filter module to filter time period date_range <- range(df_ll$date_notification, na.rm = TRUE)  # define date variables in data as named list to be used in app date_vars <- c(   \"Date of notification\" = \"date_notification\",   \"Date of onset\" = \"date_symptom_start\",   \"Date of hospitalisation\" = \"date_hospitalisation_start\",   \"Date of outcome\" = \"date_hospitalisation_end\" )  # define categorical grouping variables # in data as named list to be used in app group_vars <- c(   \"Governorate\" = \"adm1_origin\",   \"Sex\" = \"sex_id\",   \"Hospitalised\" = \"hospitalised_yn\",   \"Vaccinated measles\" = \"vacci_measles_yn\",   \"Outcome\" = \"outcome\" )  # user interface ui <- page_sidebar(   title = \"epishiny\",   # sidebar   sidebar = filter_ui(     \"filter\",     group_vars = group_vars,     date_range = date_range,     period_lab = \"Notification period\"   ),   # main content   layout_columns(     col_widths = c(12, 7, 5),     place_ui(       id = \"map\",       geo_data = geo_data,       group_vars = group_vars     ),     time_ui(       id = \"curve\",       title = \"Time\",       date_vars = date_vars,       group_vars = group_vars,       ratio_line_lab = \"Show CFR line?\"     ),     person_ui(id = \"age_sex\")   ) )  # app server server <- function(input, output, session) {   app_data <- filter_server(     id = \"filter\",     df = df_ll,     date_var = \"date_notification\",     group_vars = group_vars   )   place_server(     id = \"map\",     df = reactive(app_data()$df),     geo_data = geo_data,     group_vars = group_vars,     filter_info = reactive(app_data()$filter_info)   )   time_server(     id = \"curve\",     df = reactive(app_data()$df),     date_vars = date_vars,     group_vars = group_vars,     show_ratio = TRUE,     ratio_var = \"outcome\",     ratio_lab = \"CFR\",     ratio_numer = \"Deceased\",     ratio_denom = c(\"Deceased\", \"Healed\", \"Abandonment\"),     filter_info = reactive(app_data()$filter_info)   )   person_server(     id = \"age_sex\",     df = reactive(app_data()$df),     age_var = \"age_years\",     sex_var = \"sex_id\",     male_level = \"Male\",     female_level = \"Female\",     filter_info = reactive(app_data()$filter_info)   ) }  # launch app if (interactive()) {   shinyApp(ui, server) }"},{"path":"https://epicentre-msf.github.io/epishiny/reference/sf_yem.html","id":null,"dir":"Reference","previous_headings":"","what":"Yemen Governorate (adm1) and District (adm2) Administrative Boundaries — sf_yem","title":"Yemen Governorate (adm1) and District (adm2) Administrative Boundaries — sf_yem","text":"list length 2 containing geographic administrative boundary data Yemen, stored simple features (sf) objects.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/sf_yem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Yemen Governorate (adm1) and District (adm2) Administrative Boundaries — sf_yem","text":"","code":"sf_yem"},{"path":"https://epicentre-msf.github.io/epishiny/reference/sf_yem.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Yemen Governorate (adm1) and District (adm2) Administrative Boundaries — sf_yem","text":"named list sf objects","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/sf_yem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Yemen Governorate (adm1) and District (adm2) Administrative Boundaries — sf_yem","text":"admin level can joined example df_ll dataset join specification c(\"pcode\" = \"adm1_pcode\") c(\"pcode\" = \"adm2_pcode\") respectively. passed join_by field geo_data specification passed place_ui place_server.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/sf_yem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Yemen Governorate (adm1) and District (adm2) Administrative Boundaries — sf_yem","text":"","code":"sf_yem$adm1 #> Simple feature collection with 22 features and 5 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 41.81479 ymin: 12.10665 xmax: 54.5382 ymax: 19 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    adm0_iso3     adm0_name                   adm1_name pcode adm1_pop #> 1        YEM Yemen / اليمن                    Ibb / اب  YE11  3117999 #> 2        YEM Yemen / اليمن                Abyan / ابين  YE12   619003 #> 3        YEM Yemen / اليمن Sana'a City / امانة العاصمه  YE13  3981000 #> 4        YEM Yemen / اليمن          Al Bayda / البيضاء  YE14   830001 #> 5        YEM Yemen / اليمن                 Ta'iz / تعز  YE15  3487612 #> 6        YEM Yemen / اليمن             Al Jawf / الجوف  YE16   645000 #> 7        YEM Yemen / اليمن                Hajjah / حجه  YE17  2415001 #> 8        YEM Yemen / اليمن       Al Hodeidah / الحديده  YE18  3653999 #> 9        YEM Yemen / اليمن          Hadramawt / حضرموت  YE19  1618329 #> 10       YEM Yemen / اليمن               Dhamar / ذمار  YE20  2170000 #>                          geometry #> 1  MULTIPOLYGON (((44.08076 14... #> 2  MULTIPOLYGON (((46.29563 14... #> 3  MULTIPOLYGON (((44.3338 15.... #> 4  MULTIPOLYGON (((44.72676 14... #> 5  MULTIPOLYGON (((43.41111 12... #> 6  MULTIPOLYGON (((46.34001 17... #> 7  MULTIPOLYGON (((42.80233 15... #> 8  MULTIPOLYGON (((42.6918 13.... #> 9  MULTIPOLYGON (((50.83766 16... #> 10 MULTIPOLYGON (((44.70527 14... sf_yem$adm2 #> Simple feature collection with 335 features and 6 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 41.81479 ymin: 12.10665 xmax: 54.5382 ymax: 19 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    adm0_iso3     adm0_name adm1_name                  adm2_name  pcode adm2_pop #> 1        YEM Yemen / اليمن  Ibb / اب            Al Qafr / القفر YE1101   152248 #> 2        YEM Yemen / اليمن  Ibb / اب               Yarim / يريم YE1102   257878 #> 3        YEM Yemen / اليمن  Ibb / اب         Ar Radmah / الرضمه YE1103   111778 #> 4        YEM Yemen / اليمن  Ibb / اب       An Nadirah / النادره YE1104   108243 #> 5        YEM Yemen / اليمن  Ibb / اب         Ash Sha'ir / الشعر YE1105    58233 #> 6        YEM Yemen / اليمن  Ibb / اب          As Saddah / السده YE1106   119880 #> 7        YEM Yemen / اليمن  Ibb / اب      Al Makhadir / المخادر YE1107   166083 #> 8        YEM Yemen / اليمن  Ibb / اب             Hobeish / حبيش YE1108   152918 #> 9        YEM Yemen / اليمن  Ibb / اب Hazm Al Odayn / حزم العدين YE1109   115630 #> 10       YEM Yemen / اليمن  Ibb / اب Far' Al Odayn / فرع العدين YE1110   130477 #>                          geometry #> 1  MULTIPOLYGON (((43.82405 14... #> 2  MULTIPOLYGON (((44.2682 14.... #> 3  MULTIPOLYGON (((44.4855 14.... #> 4  MULTIPOLYGON (((44.4946 14.... #> 5  MULTIPOLYGON (((44.307 14.0... #> 6  MULTIPOLYGON (((44.44934 14... #> 7  MULTIPOLYGON (((44.22156 14... #> 8  MULTIPOLYGON (((44.01363 14... #> 9  MULTIPOLYGON (((44.05006 14... #> 10 MULTIPOLYGON (((43.80641 14..."},{"path":"https://epicentre-msf.github.io/epishiny/reference/time.html","id":null,"dir":"Reference","previous_headings":"","what":"Time module — time_ui","title":"Time module — time_ui","text":"Visualise data time interactive 'epicurve'.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time module — time_ui","text":"","code":"time_ui(   id,   date_vars,   count_vars = NULL,   group_vars = NULL,   title = \"Time\",   icon = bsicons::bs_icon(\"bar-chart-line-fill\"),   tooltip = NULL,   opts_btn_lab = \"options\",   date_lab = \"Date axis\",   date_int_lab = \"Date interval\",   date_intervals = c(Day = \"day\", Week = \"week\", Month = \"month\"),   count_vars_lab = \"Indicator\",   groups_lab = \"Group data by\",   no_grouping_lab = \"No grouping\",   bar_stacking_lab = \"Bar stacking\",   cumul_data_lab = \"Show cumulative data?\",   ratio_line_lab = \"Show ratio line?\",   full_screen = TRUE )  time_server(   id,   df,   date_vars,   count_vars = NULL,   group_vars = NULL,   show_ratio = FALSE,   ratio_var = NULL,   ratio_lab = NULL,   ratio_numer = NULL,   ratio_denom = NULL,   place_filter = shiny::reactiveVal(),   filter_info = shiny::reactiveVal(),   filter_reset = shiny::reactiveVal() )"},{"path":"https://epicentre-msf.github.io/epishiny/reference/time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time module — time_ui","text":"id Module id. Must UI server function link two. date_vars Character vector date variable(s) date axis. named, names used variable labels. count_vars data aggregated, variable name(s) count variable(s) data. one variable provided, select input appear options dropdown. named, names used variable labels. group_vars Character vector categorical variable names. provided, select input appear options dropdown allowing data groups visualised stacked bars epicurve. named, names used variable labels. title Header title card. icon icon display next title. tooltip additional title hover text information opts_btn_lab text label dropdown menu button. date_lab text label date variable input. date_int_lab text label date interval input. date_intervals Character vector choices date aggregation intervals passed unit argument lubridate::floor_date. named, names used labels. Default c('day', 'week', 'year'). count_vars_lab text label aggregate count variables input. groups_lab text label grouping variable input. no_grouping_lab text label grouping option grouping input. bar_stacking_lab text label bar stacking option. cumul_data_lab text label cumulative data option. ratio_line_lab text label ratio line input. input visable show_ratio TRUE time_server full_screen Add button card option enter full screen mode? df Data frame tibble patient level aggregated data. Can either shiny reactive static dataset. show_ratio Display ratio line epicurve? ratio_var patient level data, character string variable name use ratio calculation. ratio_lab label describe computed ratio .e. 'CFR' case fatality ratio. ratio_numer patient level data, Value(s) ratio_var used ratio numerator .e. 'Death'. aggregated data, character string numeric count column use ratio numerator .e. 'deaths'. ratio_denom patient level data, values ratio_var used ratio denominator .e. c('Death', 'Recovery'). aggregated data, character string numeric count column use ratio denominator .e. 'cases'. place_filter supply output place_server() wrapped shiny::reactive() filter data click events place module map (clicking polygon filter data clicked region) filter_info contained within app using filter_server(), supply filter_info object returned function wrapped shiny::reactive() add filter information chart exports. filter_reset contained within app using filter_server(), supply filter_reset object returned function wrapped shiny::reactive() reset click event filters set module.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time module — time_ui","text":"module server function returns point click event data highchart. see highcharter::hc_add_event_point details.","code":""}]
