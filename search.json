[{"path":"https://epicentre-msf.github.io/epishiny/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 epishiny authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Contributing","text":"Contributions made pull-requests github fork source package, reviewed package maintainers.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"package-structure","dir":"Articles","previous_headings":"","what":"Package Structure","title":"Contributing","text":"current package structure 2 levels recursion: important directory R directory. source code package code contributions must live. contribute new module, create new R script inside directory number concise, informative name. Add module UI server functions script well helper functions specific module. general utility functions can added R/utils.R script.","code":". ├── DESCRIPTION ├── LICENSE ├── LICENSE.md ├── NAMESPACE ├── R │   ├── 01_time.R │   ├── 02_place.R │   ├── 03_person.R │   ├── 04_filter.R │   ├── 05_launch.R │   ├── utils.R │   └── zzz.R ├── README.Rmd ├── README.md ├── _pkgdown.yml ├── data │   ├── df_ll.rda │   └── sf_yem.rda ├── data-raw │   ├── data.R │   └── linelist-example.xlsx ├── epishiny.Rproj ├── inst │   ├── assets │   │   ├── img │   │   └── js │   └── examples │       ├── demo │       └── docs ├── man │   ├── figures │   │   ├── dashboard.png │   │   ├── person.png │   │   ├── place.png │   │   └── time.png │   ├── filter.Rd │   ├── launch_demo_dashboard.Rd │   ├── launch_module.Rd │   ├── person.Rd │   ├── place.Rd │   └── time.Rd └── vignettes     └── contributing.Rmd"},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"standards","dir":"Articles","previous_headings":"","what":"Standards","title":"Contributing","text":"New modules need meet certain criteria able work harmony modules package.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"user-interface","dir":"Articles","previous_headings":"Standards","what":"User Interface","title":"Contributing","text":"primary requirement use UI components bslib package. bslib provides modern UI toolkit Shiny R Markdown based Bootstrap. Default shiny UI uses old version Bootstrap (v3) bslib provides access newer versions (latest currently v5). package maintained Posit, authors shiny, now recommended shiny UI framework. See package website documentation available components. module produce single graphic table output, recommended use bslib::card() module UI wrapper. need multiple tabs within module use bslib::navset_card_tab(). See package’s card article details features. Don’t forget wrap input IDs module UI ns() namespace function. See existing module UI function examples.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"server","dir":"Articles","previous_headings":"Standards","what":"Server","title":"Contributing","text":"specific requirements module server code meet try efficienct fast possible.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"outputs","dir":"Articles","previous_headings":"Standards","what":"Outputs","title":"Contributing","text":"package currently uses highcharter package interactive graphics, leaflet interactive maps reactable gtsummary packages tables. recommended use one packages outputs, possible, maintain style functionality across modules, reduce number dependencies ().","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"dependencies","dir":"Articles","previous_headings":"Standards","what":"Dependencies","title":"Contributing","text":"Due large scope package number dependencies already large multiple htmlwidget libraries used. Efforts made keep include essential dependencies contribution. example, import library use single simple function, recommended code utility function within package avoid importing external package.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/articles/contributing.html","id":"code-style","dir":"Articles","previous_headings":"Standards","what":"Code style","title":"Contributing","text":"Please follow Tidyverse style guide much possible. Use styler package restyle code submitting pull-request.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Cambpell. Author, maintainer.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cambpell P (2023). epishiny: Tools interactive visualisation epidemiological linelist data. R package version 0.0.0.9000, https://epicentre-msf.github.io/epishiny/, https://github.com/epicentre-msf/epishiny.","code":"@Manual{,   title = {epishiny: Tools for interactive visualisation of epidemiological linelist data},   author = {Paul Cambpell},   year = {2023},   note = {R package version 0.0.0.9000, https://epicentre-msf.github.io/epishiny/},   url = {https://github.com/epicentre-msf/epishiny}, }"},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"epishiny","dir":"","previous_headings":"","what":"Tools for interactive visualisation of epidemiological linelist data","title":"Tools for interactive visualisation of epidemiological linelist data","text":"Please note package alpha stage development yet suitable use production API likely change.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"philosophy","dir":"","previous_headings":"","what":"Philosophy","title":"Tools for interactive visualisation of epidemiological linelist data","text":"Interactive web-based data visualisations dashboards increasingly common method monitoring infectious disease outbreaks. Whilst R now commonly used tool analysis data visualisation epidemiology, epidemiologists often lack knowledge required able produce interactive dashboards directly within R workflows, resulting external propriatory software used instead. epishiny aims bridge gap providing simple functions produce engaging, feature-rich interactive visualisations dashboards epidemiological linelist data using R’s shiny web-framework.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for interactive visualisation of epidemiological linelist data","text":"can install development version epishiny GitHub either pak remotes package:","code":"# install.packages(\"pak\") pak::pkg_install(\"epicentre-msf/epishiny\")  # install.packages(\"remotes\") remotes::install_github(\"epicentre-msf/epishiny\")"},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"demo-dashboard","dir":"","previous_headings":"","what":"Demo Dashboard","title":"Tools for interactive visualisation of epidemiological linelist data","text":"Launch demo dashboard examples every epishiny module launch_demo_dashboard() function. code dashboard can found inst/examples/demo.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"launching-individual-modules","dir":"","previous_headings":"","what":"Launching individual modules","title":"Tools for interactive visualisation of epidemiological linelist data","text":"well use dashboards, epishiny module can launched individually within R script allowing incorporation exploratory data analaysis pipelines. interactive nature allows user quickly visualise data different ways, well export images use reports communications others.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"setup","dir":"","previous_headings":"Launching individual modules","what":"Setup","title":"Tools for interactive visualisation of epidemiological linelist data","text":"","code":"library(epishiny)  # example package data data(\"df_ll\") data(\"sf_yem\")  # setup geo data for adm1 and adm2 in the format # required for epishiny map module # if population variable is provided, attack rates # will be shown on the map as a choropleth geo_data <- list(   \"adm1\" = list(     level_name = \"Governorate\", # name of the boundary level     sf = sf_yem$adm1, # sf object with boundary polygons     name_var = \"adm1_name\", # variable with place names     pop_var = \"adm1_pop\", # variable with population data (optional)     join_by = c(\"pcode\" = \"adm1_pcode\") # geo to data join vars: LHS = sf, RHS = data   ),   # same for admin 2 level   \"adm2\" = list(     level_name = \"District\",     sf = sf_yem$adm2,     name_var = \"adm2_name\",     pop_var = \"adm2_pop\",     join_by = c(\"pcode\" = \"adm2_pcode\")   ) )  # define date variables in data as named list to be used in app date_vars <- c(   \"Date of notification\" = \"date_notification\",   \"Date of onset\" = \"date_symptom_start\",   \"Date of hospitalisation\" = \"date_hospitalisation_start\",   \"Date of outcome\" = \"date_hospitalisation_end\" )  # define categorical grouping variables # in data as named list to be used in app group_vars <- c(   \"Governorate\" = \"adm1_origin\",   \"Sex\" = \"sex_id\",   \"Hospitalised\" = \"hospitalised_yn\",   \"Vaccinated measles\" = \"vacci_measles_yn\",   \"Outcome\" = \"outcome\" )"},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"time-module","dir":"","previous_headings":"Launching individual modules","what":"Time module","title":"Tools for interactive visualisation of epidemiological linelist data","text":"","code":"# launch time epicurve module launch_module(   module = \"time\",   df_ll = df_ll,   date_vars = date_vars,   group_vars = group_vars )"},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"place-module","dir":"","previous_headings":"Launching individual modules","what":"Place module","title":"Tools for interactive visualisation of epidemiological linelist data","text":"","code":"# launch place map module launch_module(   module = \"place\",   df_ll = df_ll,   geo_data = geo_data,   group_vars = group_vars )"},{"path":"https://epicentre-msf.github.io/epishiny/index.html","id":"person-module","dir":"","previous_headings":"Launching individual modules","what":"Person module","title":"Tools for interactive visualisation of epidemiological linelist data","text":"","code":"# launch person age/sex pyramid module launch_module(   module = \"person\",   df_ll = df_ll,   age_var = \"age_years\",   sex_var = \"sex_id\",   male_level = \"Male\",   female_level = \"Female\" )"},{"path":"https://epicentre-msf.github.io/epishiny/reference/df_ll.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Linelist Data — df_ll","title":"Example Linelist Data — df_ll","text":"'linelist' (tidy) data format used public health data collection row representing individual (patient, participant, etc) column representing variable associated said individual.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/df_ll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Linelist Data — df_ll","text":"","code":"df_ll"},{"path":"https://epicentre-msf.github.io/epishiny/reference/df_ll.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Linelist Data — df_ll","text":"tibble dataframe","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/df_ll.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Linelist Data — df_ll","text":"df_ll example linelist dataset containing data fake measles outbreak Yemen. data contains temporal, demographic, geographic information patient, well medical indicators.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/df_ll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Linelist Data — df_ll","text":"","code":"df_ll #> # A tibble: 1,000 × 29 #>    case_id date_notification date_symptom_start date_hospitalisation_start #>    <chr>   <date>            <date>             <date>                     #>  1 P0001   2022-10-07        2022-10-03         NA                         #>  2 P0002   2022-09-18        2022-09-12         NA                         #>  3 P0003   2022-04-11        2022-04-01         2022-04-14                 #>  4 P0004   2022-04-16        2022-04-11         2022-04-20                 #>  5 P0005   2022-08-05        2022-07-29         2022-08-09                 #>  6 P0006   2022-10-06        2022-09-30         NA                         #>  7 P0007   2022-08-01        2022-07-29         NA                         #>  8 P0008   2022-08-06        2022-07-30         2022-08-11                 #>  9 P0009   2022-05-06        2022-04-30         2022-05-09                 #> 10 P0010   2022-10-13        2022-10-11         NA                         #> # ℹ 990 more rows #> # ℹ 25 more variables: date_sample_occurred <date>, #> #   date_sample_lab_result_occurred <date>, date_hospitalisation_end <date>, #> #   sex_id <chr>, age_years <dbl>, adm1_origin <chr>, adm2_origin <chr>, #> #   adm3_origin <chr>, adm4_origin <chr>, adm1_pcode <chr>, adm2_pcode <chr>, #> #   fever <chr>, rash <chr>, cough <chr>, oral_lesions <chr>, muac <chr>, #> #   oedema <chr>, hospitalised_yn <chr>, measles_stage <chr>, oxygen <chr>, …"},{"path":"https://epicentre-msf.github.io/epishiny/reference/filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter module — filter_ui","title":"Filter module — filter_ui","text":"Filter linelist data using sidebar shiny inputs.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter module — filter_ui","text":"","code":"filter_ui(   id,   date_range,   title = \"Data filters\",   date_filters_lab = \"Date filters\",   period_lab = \"Period\",   missing_dates_lab = \"Include patients with missing dates?\",   group_filters_lab = \"Group filters\",   filter_btn_lab = \"Filter data\",   reset_btn_lab = \"Reset filters\" )  filter_server(   id,   df_ll,   date_var,   group_vars,   na_label = getOption(\"epishiny.na.label\", \"(Missing)\") )"},{"path":"https://epicentre-msf.github.io/epishiny/reference/filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter module — filter_ui","text":"id Module id. Must UI server function link two. date_range vector containing minimum maximum dates date range input. title title sidebar. date_filters_lab label date filters accordion panel. period_lab label date range input. missing_dates_lab label include missing dates checkbox. group_filters_lab label group filters accordion panel. filter_btn_lab label filter data button. reset_btn_lab label reset filters button. df_ll Data frame tibble patient level linelist data. Can either shiny reactive static dataset. date_var name date variable data frame filtered . group_vars named character vector categorical variables data grouping input. Names used variable labels. na_label label use missing values group variables.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter module — filter_ui","text":"bslib::sidebar UI element date filters, group filters, action buttons. server function returns filtered data formatted text string filter information named df_ll filter_info respectively reactive list. passed arguments name time, place person modules wrapped shiny::reactive()","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter module — filter_ui","text":"","code":"library(shiny) library(bslib) #>  #> Attaching package: ‘bslib’ #> The following object is masked from ‘package:utils’: #>  #>     page library(epishiny)  # example package data data(\"df_ll\") # linelist data(\"sf_yem\") # sf geo boundaries for Yemen admin 1 & 2  # setup geo data for adm1 and adm2 in the format # required for epishiny map module geo_data <- list(   \"adm1\" = list(     level_name = \"Governorate\",     sf = sf_yem$adm1,     name_var = \"adm1_name\",     pop_var = \"adm1_pop\",     join_by = c(\"pcode\" = \"adm1_pcode\")   ),   \"adm2\" = list(     level_name = \"District\",     sf = sf_yem$adm2,     name_var = \"adm2_name\",     pop_var = \"adm2_pop\",     join_by = c(\"pcode\" = \"adm2_pcode\")   ) )  # range of dates used in filter module to filter time period date_range <- range(df_ll$date_notification, na.rm = TRUE)  # define date variables in data as named list to be used in app date_vars <- c(   \"Date of notification\" = \"date_notification\",   \"Date of onset\" = \"date_symptom_start\",   \"Date of hospitalisation\" = \"date_hospitalisation_start\",   \"Date of outcome\" = \"date_hospitalisation_end\" )  # define categorical grouping variables # in data as named list to be used in app group_vars <- c(   \"Governorate\" = \"adm1_origin\",   \"Sex\" = \"sex_id\",   \"Hospitalised\" = \"hospitalised_yn\",   \"Vaccinated measles\" = \"vacci_measles_yn\",   \"Outcome\" = \"outcome\" )  # user interface ui <- page_sidebar(   title = \"epishiny\",   # sidebar   sidebar = filter_ui(     \"filter\",     date_range = date_range,     period_lab = \"Notification period\"   ),   # main content   layout_columns(     col_widths = c(12, 7, 5),     place_ui(       id = \"map\",       geo_data = geo_data,       group_vars = group_vars     ),     time_ui(       id = \"curve\",       title = \"Time\",       date_vars = date_vars,       group_vars = group_vars,       ratio_line_lab = \"Show CFR line?\"     ),     person_ui(id = \"age_sex\")   ) ) #> Error in loadNamespace(x): there is no package called ‘bsicons’  # app server server <- function(input, output, session) {   app_data <- filter_server(     id = \"filter\",     df_ll = df_ll,     date_var = \"date_notification\",     group_vars = group_vars   )   place_server(     id = \"map\",     df_ll = reactive(app_data()$df_ll),     geo_data = geo_data,     group_vars = group_vars,     filter_info = reactive(app_data()$filter_info)   )   time_server(     id = \"curve\",     df_ll = reactive(app_data()$df_ll),     date_vars = date_vars,     group_vars = group_vars,     ratio_var = \"outcome\",     ratio_lab = \"CFR\",     ratio_numer = \"Deceased\",     ratio_denom = c(\"Deceased\", \"Healed\", \"Abandonment\"),     filter_info = reactive(app_data()$filter_info)   )   person_server(     id = \"age_sex\",     df_ll = reactive(app_data()$df_ll),     age_var = \"age_years\",     sex_var = \"sex_id\",     male_level = \"Male\",     female_level = \"Female\",     filter_info = reactive(app_data()$filter_info)   ) }  # launch app if (interactive()) {   shinyApp(ui, server) }"},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_demo_dashboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch epishiny demo dashboard — launch_demo_dashboard","title":"Launch epishiny demo dashboard — launch_demo_dashboard","text":"See example type dashboard can build using epishiny modules within bslib UI.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_demo_dashboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch epishiny demo dashboard — launch_demo_dashboard","text":"","code":"launch_demo_dashboard()"},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_demo_dashboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch epishiny demo dashboard — launch_demo_dashboard","text":"return value, shiny app launched.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_demo_dashboard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch epishiny demo dashboard — launch_demo_dashboard","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   library(epishiny)   launch_demo_dashboard() }"},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch a single 'epishiny' module as a standalone shiny app — launch_module","title":"Launch a single 'epishiny' module as a standalone shiny app — launch_module","text":"Use function quickly launch 3 'epishiny' interactive visualisation modules (time, place, person) independently, allowing incorporation exploratory data analysis workflows R.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch a single 'epishiny' module as a standalone shiny app — launch_module","text":"","code":"launch_module(module = c(\"time\", \"place\", \"person\"), ...)"},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch a single 'epishiny' module as a standalone shiny app — launch_module","text":"module Name module launch. Current options \"time\", \"place\" \"person\". ... named arguments passed relevant module UI Server functions. See module's documentation details arguments required.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch a single 'epishiny' module as a standalone shiny app — launch_module","text":"return value, shiny app launched.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/launch_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch a single 'epishiny' module as a standalone shiny app — launch_module","text":"","code":"library(shiny) library(epishiny)  # example package data data(\"df_ll\") data(\"sf_yem\")  # setup geo data for adm1 and adm2 in the format # required for epishiny map module geo_data <- list(   \"adm1\" = list(     level_name = \"Governorate\",     sf = sf_yem$adm1,     name_var = \"adm1_name\",     join_by = c(\"pcode\" = \"adm1_pcode\")   ),   \"adm2\" = list(     level_name = \"District\",     sf = sf_yem$adm2,     name_var = \"adm2_name\",     join_by = c(\"pcode\" = \"adm2_pcode\")   ) )  # define date variables in data as named list to be used in app date_vars <- c(   \"Date of notification\" = \"date_notification\",   \"Date of onset\" = \"date_symptom_start\",   \"Date of hospitalisation\" = \"date_hospitalisation_start\",   \"Date of outcome\" = \"date_hospitalisation_end\" )  # define categorical grouping variables # in data as named list to be used in app group_vars <- c(   \"Governorate\" = \"adm1_origin\",   \"Sex\" = \"sex_id\",   \"Hospitalised\" = \"hospitalised_yn\",   \"Vaccinated measles\" = \"vacci_measles_yn\",   \"Outcome\" = \"outcome\" )  # launch time epicurve module if (interactive()) {   launch_module(     module = \"time\",     df_ll = df_ll,     date_vars = date_vars,     group_vars = group_vars,     ratio_line_lab = \"Show CFR line?\",     ratio_var = \"outcome\",     ratio_lab = \"CFR\",     ratio_numer = \"Deceased\",     ratio_denom = c(\"Deceased\", \"Healed\", \"Abandonment\")   ) }  # launch place map module if (interactive()) {   launch_module(     module = \"place\",     df_ll = df_ll,     geo_data = geo_data,     group_vars = group_vars   ) }  # launch person age/sex pyramid module if (interactive()) {   launch_module(     module = \"person\",     df_ll = df_ll,     age_var = \"age_years\",     sex_var = \"sex_id\",     male_level = \"Male\",     female_level = \"Female\"   ) }"},{"path":"https://epicentre-msf.github.io/epishiny/reference/person.html","id":null,"dir":"Reference","previous_headings":"","what":"Person module — person_ui","title":"Person module — person_ui","text":"Visualise age sex demographics population pyramid chart summary table.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/person.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Person module — person_ui","text":"","code":"person_ui(   id,   title = \"Person\",   icon = bsicons::bs_icon(\"people-fill\"),   opts_btn_lab = \"options\",   full_screen = TRUE )  person_server(   id,   df_ll,   age_var,   sex_var,   male_level,   female_level,   age_breaks = c(0, 5, 18, 25, 35, 50, Inf),   age_labels = c(\"<5\", \"5-17\", \"18-24\", \"25-34\", \"35-49\", \"50+\"),   age_var_lab = \"Age (years)\",   age_group_lab = \"Age group\",   n_lab = \"N patients\",   colours = c(\"#f15f36\", \"#19a0aa\"),   filter_info = shiny::reactiveVal() )"},{"path":"https://epicentre-msf.github.io/epishiny/reference/person.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Person module — person_ui","text":"id Module id. Must UI server function link two. title title card. icon icon display next title. opts_btn_lab label options button. full_screen Add button card option enter full screen mode? df_ll Data frame tibble patient level linelist data. Can either shiny reactive static dataset. age_var name age variable data. sex_var name sex variable data. male_level level representing males sex variable. female_level level representing females sex variable. age_breaks numeric vector specifying age breaks age groups. age_labels Labels corresponding age breaks. age_var_lab label age variable. age_group_lab label age group variable. n_lab label raw count variable. colours Vector 2 colours represent male female, respectively. filter_info contained within app using filter_server(), supply filter_info element returned function shiny reactive add filter information chart exports.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/person.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Person module — person_ui","text":"bslib::navset_card_tab UI element chart table tabs.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/person.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Person module — person_ui","text":"","code":"library(shiny) library(bslib) library(epishiny)  # example package data data(\"df_ll\") # linelist data(\"sf_yem\") # sf geo boundaries for Yemen admin 1 & 2  # setup geo data for adm1 and adm2 in the format # required for epishiny map module geo_data <- list(   \"adm1\" = list(     level_name = \"Governorate\",     sf = sf_yem$adm1,     name_var = \"adm1_name\",     pop_var = \"adm1_pop\",     join_by = c(\"pcode\" = \"adm1_pcode\")   ),   \"adm2\" = list(     level_name = \"District\",     sf = sf_yem$adm2,     name_var = \"adm2_name\",     pop_var = \"adm2_pop\",     join_by = c(\"pcode\" = \"adm2_pcode\")   ) )  # range of dates used in filter module to filter time period date_range <- range(df_ll$date_notification, na.rm = TRUE)  # define date variables in data as named list to be used in app date_vars <- c(   \"Date of notification\" = \"date_notification\",   \"Date of onset\" = \"date_symptom_start\",   \"Date of hospitalisation\" = \"date_hospitalisation_start\",   \"Date of outcome\" = \"date_hospitalisation_end\" )  # define categorical grouping variables # in data as named list to be used in app group_vars <- c(   \"Governorate\" = \"adm1_origin\",   \"Sex\" = \"sex_id\",   \"Hospitalised\" = \"hospitalised_yn\",   \"Vaccinated measles\" = \"vacci_measles_yn\",   \"Outcome\" = \"outcome\" )  # user interface ui <- page_sidebar(   title = \"epishiny\",   # sidebar   sidebar = filter_ui(     \"filter\",     date_range = date_range,     period_lab = \"Notification period\"   ),   # main content   layout_columns(     col_widths = c(12, 7, 5),     place_ui(       id = \"map\",       geo_data = geo_data,       group_vars = group_vars     ),     time_ui(       id = \"curve\",       title = \"Time\",       date_vars = date_vars,       group_vars = group_vars,       ratio_line_lab = \"Show CFR line?\"     ),     person_ui(id = \"age_sex\")   ) ) #> Error in loadNamespace(x): there is no package called ‘bsicons’  # app server server <- function(input, output, session) {   app_data <- filter_server(     id = \"filter\",     df_ll = df_ll,     date_var = \"date_notification\",     group_vars = group_vars   )   place_server(     id = \"map\",     df_ll = reactive(app_data()$df_ll),     geo_data = geo_data,     group_vars = group_vars,     filter_info = reactive(app_data()$filter_info)   )   time_server(     id = \"curve\",     df_ll = reactive(app_data()$df_ll),     date_vars = date_vars,     group_vars = group_vars,     ratio_var = \"outcome\",     ratio_lab = \"CFR\",     ratio_numer = \"Deceased\",     ratio_denom = c(\"Deceased\", \"Healed\", \"Abandonment\"),     filter_info = reactive(app_data()$filter_info)   )   person_server(     id = \"age_sex\",     df_ll = reactive(app_data()$df_ll),     age_var = \"age_years\",     sex_var = \"sex_id\",     male_level = \"Male\",     female_level = \"Female\",     filter_info = reactive(app_data()$filter_info)   ) }  # launch app if (interactive()) {   shinyApp(ui, server) }"},{"path":"https://epicentre-msf.github.io/epishiny/reference/place.html","id":null,"dir":"Reference","previous_headings":"","what":"Place module — place_ui","title":"Place module — place_ui","text":"Visualise geographical distribution across multiple administrative boundaries interactive leaflet map.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/place.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Place module — place_ui","text":"","code":"place_ui(   id,   geo_data,   group_vars = NULL,   title = \"Place\",   icon = bsicons::bs_icon(\"geo-fill\"),   geo_lab = \"Geo boundaries\",   groups_lab = \"Group data by\",   circle_size_lab = \"Circle size multiplyer\",   opts_btn_lab = \"options\",   download_lab = \"download\",   n_lab = \"N patients\",   full_screen = TRUE )  place_server(   id,   df_ll,   geo_data,   group_vars = NULL,   n_lab = \"N patients\",   show_parent_borders = TRUE,   choro_lab = \"Attack rate<br>per 100 000\",   choro_pal = \"Reds\",   choro_opacity = 0.7,   export_width = 1200,   export_height = 650,   filter_info = shiny::reactiveVal() )"},{"path":"https://epicentre-msf.github.io/epishiny/reference/place.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Place module — place_ui","text":"id Module id. Must UI server function link two. geo_data list named lists containing spatial sf dataframes information different geographical levels. group_vars Character vector categorical variable names. provided, select input appear options dropdown allowing data groups visualised map pie charts per geographical unit. named, names used variable labels. title title card. icon icon displayed next title geo_lab label geographical level selection. groups_lab label group data selection. circle_size_lab text label circle size slider input. opts_btn_lab text label dropdown menu button. download_lab text label download button. n_lab label raw count variable. full_screen Add button card option enter full screen mode? df_ll Data frame tibble patient level linelist data. Can either shiny reactive static dataset. show_parent_borders Show borders parent boundary levels? choro_lab Label attack rate choropleth (applicable geo_data contains population data) choro_pal Colour palette passed leaflet::colorBin() attack rate choropleth (applicable geo_data contains population data) choro_opacity Opacity choropleth colour (applicable geo_data contains population data) export_width width exported map image. export_height height exported map image. filter_info contained within app using filter_server(), supply filter_info element returned function shiny reactive add filter information chart exports.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/place.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Place module — place_ui","text":"bslib::card UI element options download button leaflet map. server function returns leaflet map's shape click information list.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/place.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Place module — place_ui","text":"","code":"library(shiny) library(bslib) library(epishiny)  # example package data data(\"df_ll\") # linelist data(\"sf_yem\") # sf geo boundaries for Yemen admin 1 & 2  # setup geo data for adm1 and adm2 in the format # required for epishiny map module geo_data <- list(   \"adm1\" = list(     level_name = \"Governorate\",     sf = sf_yem$adm1,     name_var = \"adm1_name\",     pop_var = \"adm1_pop\",     join_by = c(\"pcode\" = \"adm1_pcode\")   ),   \"adm2\" = list(     level_name = \"District\",     sf = sf_yem$adm2,     name_var = \"adm2_name\",     pop_var = \"adm2_pop\",     join_by = c(\"pcode\" = \"adm2_pcode\")   ) )  # range of dates used in filter module to filter time period date_range <- range(df_ll$date_notification, na.rm = TRUE)  # define date variables in data as named list to be used in app date_vars <- c(   \"Date of notification\" = \"date_notification\",   \"Date of onset\" = \"date_symptom_start\",   \"Date of hospitalisation\" = \"date_hospitalisation_start\",   \"Date of outcome\" = \"date_hospitalisation_end\" )  # define categorical grouping variables # in data as named list to be used in app group_vars <- c(   \"Governorate\" = \"adm1_origin\",   \"Sex\" = \"sex_id\",   \"Hospitalised\" = \"hospitalised_yn\",   \"Vaccinated measles\" = \"vacci_measles_yn\",   \"Outcome\" = \"outcome\" )  # user interface ui <- page_sidebar(   title = \"epishiny\",   # sidebar   sidebar = filter_ui(     \"filter\",     date_range = date_range,     period_lab = \"Notification period\"   ),   # main content   layout_columns(     col_widths = c(12, 7, 5),     place_ui(       id = \"map\",       geo_data = geo_data,       group_vars = group_vars     ),     time_ui(       id = \"curve\",       title = \"Time\",       date_vars = date_vars,       group_vars = group_vars,       ratio_line_lab = \"Show CFR line?\"     ),     person_ui(id = \"age_sex\")   ) ) #> Error in loadNamespace(x): there is no package called ‘bsicons’  # app server server <- function(input, output, session) {   app_data <- filter_server(     id = \"filter\",     df_ll = df_ll,     date_var = \"date_notification\",     group_vars = group_vars   )   place_server(     id = \"map\",     df_ll = reactive(app_data()$df_ll),     geo_data = geo_data,     group_vars = group_vars,     filter_info = reactive(app_data()$filter_info)   )   time_server(     id = \"curve\",     df_ll = reactive(app_data()$df_ll),     date_vars = date_vars,     group_vars = group_vars,     ratio_var = \"outcome\",     ratio_lab = \"CFR\",     ratio_numer = \"Deceased\",     ratio_denom = c(\"Deceased\", \"Healed\", \"Abandonment\"),     filter_info = reactive(app_data()$filter_info)   )   person_server(     id = \"age_sex\",     df_ll = reactive(app_data()$df_ll),     age_var = \"age_years\",     sex_var = \"sex_id\",     male_level = \"Male\",     female_level = \"Female\",     filter_info = reactive(app_data()$filter_info)   ) }  # launch app if (interactive()) {   shinyApp(ui, server) }"},{"path":"https://epicentre-msf.github.io/epishiny/reference/sf_yem.html","id":null,"dir":"Reference","previous_headings":"","what":"Yemen Governorate (adm1) and District (adm2) Administrative Boundaries — sf_yem","title":"Yemen Governorate (adm1) and District (adm2) Administrative Boundaries — sf_yem","text":"list length 2 containing geographic administrative boundary data Yemen, stored simple features (sf) objects.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/sf_yem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Yemen Governorate (adm1) and District (adm2) Administrative Boundaries — sf_yem","text":"","code":"sf_yem"},{"path":"https://epicentre-msf.github.io/epishiny/reference/sf_yem.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Yemen Governorate (adm1) and District (adm2) Administrative Boundaries — sf_yem","text":"named list sf objects","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/sf_yem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Yemen Governorate (adm1) and District (adm2) Administrative Boundaries — sf_yem","text":"admin level can joined example df_ll dataset join specification c(\"pcode\" = \"adm1_pcode\") c(\"pcode\" = \"adm2_pcode\") respectively. passed join_by field geo_data specification passed place_ui place_server.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/sf_yem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Yemen Governorate (adm1) and District (adm2) Administrative Boundaries — sf_yem","text":"","code":"sf_yem$adm1 #> Simple feature collection with 22 features and 8 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 41.81479 ymin: 12.10665 xmax: 54.5382 ymax: 19 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    adm0_iso3 adm0_sub     adm0_name                   adm1_name pcode      lon #> 1        YEM      ALL Yemen / اليمن                    Ibb / اب  YE11 44.18040 #> 2        YEM      ALL Yemen / اليمن                Abyan / ابين  YE12 46.23681 #> 3        YEM      ALL Yemen / اليمن Sana'a City / امانة العاصمه  YE13 44.17556 #> 4        YEM      ALL Yemen / اليمن          Al Bayda / البيضاء  YE14 45.27953 #> 5        YEM      ALL Yemen / اليمن                 Ta'iz / تعز  YE15 43.78494 #> 6        YEM      ALL Yemen / اليمن             Al Jawf / الجوف  YE16 45.59372 #> 7        YEM      ALL Yemen / اليمن                Hajjah / حجه  YE17 43.20314 #> 8        YEM      ALL Yemen / اليمن       Al Hodeidah / الحديده  YE18 43.21762 #> 9        YEM      ALL Yemen / اليمن          Hadramawt / حضرموت  YE19 48.63126 #> 10       YEM      ALL Yemen / اليمن               Dhamar / ذمار  YE20 44.30275 #>         lat adm1_pop                       geometry #> 1  14.08362  3117999 MULTIPOLYGON (((44.08076 14... #> 2  13.63099   619003 MULTIPOLYGON (((46.29563 14... #> 3  15.40928  3981000 MULTIPOLYGON (((44.3338 15.... #> 4  14.32562   830001 MULTIPOLYGON (((44.72676 14... #> 5  13.29334  3487612 MULTIPOLYGON (((43.41111 12... #> 6  16.59384   645000 MULTIPOLYGON (((46.34001 17... #> 7  16.09100  2415001 MULTIPOLYGON (((42.80233 15... #> 8  14.78216  3653999 MULTIPOLYGON (((42.6918 13.... #> 9  16.52279  1618329 MULTIPOLYGON (((50.83766 16... #> 10 14.54205  2170000 MULTIPOLYGON (((44.70527 14... sf_yem$adm2 #> Simple feature collection with 335 features and 9 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 41.81479 ymin: 12.10665 xmax: 54.5382 ymax: 19 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    adm0_iso3 adm0_sub     adm0_name adm1_name                  adm2_name  pcode #> 1        YEM      ALL Yemen / اليمن  Ibb / اب            Al Qafr / القفر YE1101 #> 2        YEM      ALL Yemen / اليمن  Ibb / اب               Yarim / يريم YE1102 #> 3        YEM      ALL Yemen / اليمن  Ibb / اب         Ar Radmah / الرضمه YE1103 #> 4        YEM      ALL Yemen / اليمن  Ibb / اب       An Nadirah / النادره YE1104 #> 5        YEM      ALL Yemen / اليمن  Ibb / اب         Ash Sha'ir / الشعر YE1105 #> 6        YEM      ALL Yemen / اليمن  Ibb / اب          As Saddah / السده YE1106 #> 7        YEM      ALL Yemen / اليمن  Ibb / اب      Al Makhadir / المخادر YE1107 #> 8        YEM      ALL Yemen / اليمن  Ibb / اب             Hobeish / حبيش YE1108 #> 9        YEM      ALL Yemen / اليمن  Ibb / اب Hazm Al Odayn / حزم العدين YE1109 #> 10       YEM      ALL Yemen / اليمن  Ibb / اب Far' Al Odayn / فرع العدين YE1110 #>         lon      lat adm2_pop                       geometry #> 1  44.04029 14.32486   152248 MULTIPOLYGON (((43.82405 14... #> 2  44.37298 14.28908   257878 MULTIPOLYGON (((44.2682 14.... #> 3  44.55286 14.21038   111778 MULTIPOLYGON (((44.4855 14.... #> 4  44.48370 14.06157   108243 MULTIPOLYGON (((44.4946 14.... #> 5  44.36793 14.03340    58233 MULTIPOLYGON (((44.307 14.0... #> 6  44.41946 14.16679   119880 MULTIPOLYGON (((44.44934 14... #> 7  44.20557 14.14071   166083 MULTIPOLYGON (((44.22156 14... #> 8  44.10425 14.11770   152918 MULTIPOLYGON (((44.01363 14... #> 9  43.83321 14.11171   115630 MULTIPOLYGON (((44.05006 14... #> 10 43.78992 13.95782   130477 MULTIPOLYGON (((43.80641 14..."},{"path":"https://epicentre-msf.github.io/epishiny/reference/time.html","id":null,"dir":"Reference","previous_headings":"","what":"Time module — time_ui","title":"Time module — time_ui","text":"Visualise data time interactive 'epicurve'.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time module — time_ui","text":"","code":"time_ui(   id,   date_vars,   group_vars = NULL,   title = \"Time\",   icon = bsicons::bs_icon(\"bar-chart-line-fill\"),   opts_btn_lab = \"options\",   date_lab = \"Date axis\",   date_int_lab = \"Date interval\",   day_week_month_labs = c(\"Day\", \"Week\", \"Month\"),   groups_lab = \"Group data by\",   bar_stacking_lab = \"Bar stacking\",   cumul_data_lab = \"Show cumulative data?\",   n_lab = \"N patients\",   ratio_line_lab = NULL,   full_screen = TRUE )  time_server(   id,   df_ll,   date_vars,   group_vars = NULL,   y_lab = \"Patients\",   n_lab = \"N patients\",   ratio_var = NULL,   ratio_lab = NULL,   ratio_numer = NULL,   ratio_denom = NULL,   filter_info = shiny::reactiveVal() )"},{"path":"https://epicentre-msf.github.io/epishiny/reference/time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time module — time_ui","text":"id Module id. Must UI server function link two. date_vars named character vector date variables date axis input. Names used variable labels. group_vars Character vector categorical variable names. provided, select input appear options dropdown allowing data groups visualised stacked bars epicurve. named, names used variable labels. title header title card. icon icon display next title. opts_btn_lab text label dropdown menu button. date_lab text label date variable input. date_int_lab text label date interval input. day_week_month_labs character vector text labels day, week month, respectively. groups_lab text label grouping variable input. bar_stacking_lab text label bar stacking option. cumul_data_lab text label cumulative data option. n_lab label raw count variable. ratio_line_lab text label ratio line input. supplied input included. full_screen Add button card option enter full screen mode? df_ll Data frame tibble patient level linelist data. Can either shiny reactive static dataset. y_lab label y-axis chart. ratio_var Character string variable name use ratio calculation. ratio_lab label describe computed ratio .e. 'CFR' case fatality ratio. ratio_numer Value(s) ratio_var used ratio numerator .e. 'Death'. ratio_denom Values ratio_var used ratio denominator .e. c('Death', 'Recovery'). filter_info contained within app using filter_server(), supply filter_info element returned function shiny reactive add filter information chart exports.","code":""},{"path":"https://epicentre-msf.github.io/epishiny/reference/time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time module — time_ui","text":"module server function returns point click event data highchart. see highcharter::hc_add_event_point details.","code":""}]
